/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/clients": {
    /**
     * Returns a list of your clients. The clients are returned sorted by creation date, with the most recently created clients appearing first.
     *
     * The response contains an object with a clients property that contains an array of up to per_page clients. Each entry in the array is a separate client object. If no more clients are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your clients.
     */
    get: operations["listClients"];
    /** Creates a new client object. Returns a client object and a 201 Created response code if the call succeeded. */
    post: operations["createClient"];
  };
  "/clients/{clientId}": {
    /** Retrieves the client with the given ID. Returns a client object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveClient"];
    /** Delete a client. Deleting a client is only possible if it has no projects, invoices, or estimates associated with it. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteClient"];
    /** Updates the specific client by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a client object and a 200 OK response code if the call succeeded. */
    patch: operations["updateClient"];
  };
  "/company": {
    /**
     * Retrieves the company for the currently authenticated user. Returns a
     * company object and a 200 OK response code.
     */
    get: operations["retrieveCompany"];
    /** Updates the company setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a company object and a 200 OK response code if the call succeeded. */
    patch: operations["updateCompany"];
  };
  "/contacts": {
    /**
     * Returns a list of your contacts. The contacts are returned sorted by creation date, with the most recently created contacts appearing first.
     *
     * The response contains an object with a contacts property that contains an array of up to per_page contacts. Each entry in the array is a separate contact object. If no more contacts are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your contacts.
     */
    get: operations["listContacts"];
    /** Creates a new contact object. Returns a contact object and a 201 Created response code if the call succeeded. */
    post: operations["createContact"];
  };
  "/contacts/{contactId}": {
    /** Retrieves the contact with the given ID. Returns a contact object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveContact"];
    /** Delete a contact. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteContact"];
    /** Updates the specific contact by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a contact object and a 200 OK response code if the call succeeded. */
    patch: operations["updateContact"];
  };
  "/estimate_item_categories": {
    /**
     * Returns a list of your estimate item categories. The estimate item categories are returned sorted by creation date, with the most recently created estimate item categories appearing first.
     *
     * The response contains an object with a estimate_item_categories property that contains an array of up to per_page estimate item categories. Each entry in the array is a separate estimate item category object. If no more estimate item categories are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your estimate item categories.
     */
    get: operations["listEstimateItemCategories"];
    /** Creates a new estimate item category object. Returns an estimate item category object and a 201 Created response code if the call succeeded. */
    post: operations["createEstimateItemCategory"];
  };
  "/estimate_item_categories/{estimateItemCategoryId}": {
    /** Retrieves the estimate item category with the given ID. Returns an estimate item category object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveEstimateItemCategory"];
    /** Delete an estimate item category. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteEstimateItemCategory"];
    /** Updates the specific estimate item category by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an estimate item category object and a 200 OK response code if the call succeeded. */
    patch: operations["updateEstimateItemCategory"];
  };
  "/estimates": {
    /**
     * Returns a list of your estimates. The estimates are returned sorted by issue date, with the most recently issued estimates appearing first.
     *
     * The response contains an object with a estimates property that contains an array of up to per_page estimates. Each entry in the array is a separate estimate object. If no more estimates are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your estimates.
     */
    get: operations["listEstimates"];
    /** Creates a new estimate object. Returns an estimate object and a 201 Created response code if the call succeeded. */
    post: operations["createEstimate"];
  };
  "/estimates/{estimateId}": {
    /** Retrieves the estimate with the given ID. Returns an estimate object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveEstimate"];
    /** Delete an estimate. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteEstimate"];
    /** Updates the specific estimate by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an estimate object and a 200 OK response code if the call succeeded. */
    patch: operations["updateEstimate"];
  };
  "/estimates/{estimateId}/messages": {
    /**
     * Returns a list of messages associated with a given estimate. The estimate messages are returned sorted by creation date, with the most recently created messages appearing first.
     *
     * The response contains an object with an estimate_messages property that contains an array of up to per_page messages. Each entry in the array is a separate message object. If no more messages are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your messages.
     */
    get: operations["listMessagesForEstimate"];
    /** Creates a new estimate message object. Returns an estimate message object and a 201 Created response code if the call succeeded. */
    post: operations["createEstimateMessage"];
  };
  "/estimates/{estimateId}/messages/{messageId}": {
    /** Delete an estimate message. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteEstimateMessage"];
  };
  "/expense_categories": {
    /**
     * Returns a list of your expense categories. The expense categories are returned sorted by creation date, with the most recently created expense categories appearing first.
     *
     * The response contains an object with a expense_categories property that contains an array of up to per_page expense categories. Each entry in the array is a separate expense category object. If no more expense categories are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your expense categories.
     */
    get: operations["listExpenseCategories"];
    /** Creates a new expense category object. Returns an expense category object and a 201 Created response code if the call succeeded. */
    post: operations["createExpenseCategory"];
  };
  "/expense_categories/{expenseCategoryId}": {
    /** Retrieves the expense category with the given ID. Returns an expense category object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveExpenseCategory"];
    /** Delete an expense category. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteExpenseCategory"];
    /** Updates the specific expense category by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an expense category object and a 200 OK response code if the call succeeded. */
    patch: operations["updateExpenseCategory"];
  };
  "/expenses": {
    /**
     * Returns a list of your expenses. If accessing this endpoint as an Admin, all expenses in the account will be returned. The expenses are returned sorted by the spent_at date, with the most recent expenses appearing first.
     *
     * The response contains an object with a expenses property that contains an array of up to per_page expenses. Each entry in the array is a separate expense object. If no more expenses are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your expenses.
     */
    get: operations["listExpenses"];
    /** Creates a new expense object. Returns an expense object and a 201 Created response code if the call succeeded. */
    post: operations["createExpense"];
  };
  "/expenses/{expenseId}": {
    /** Retrieves the expense with the given ID. Returns an expense object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveExpense"];
    /** Delete an expense. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteExpense"];
    /** Updates the specific expense by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an expense object and a 200 OK response code if the call succeeded. */
    patch: operations["updateExpense"];
  };
  "/invoice_item_categories": {
    /**
     * Returns a list of your invoice item categories. The invoice item categories are returned sorted by creation date, with the most recently created invoice item categories appearing first.
     *
     * The response contains an object with a invoice_item_categories property that contains an array of up to per_page invoice item categories. Each entry in the array is a separate invoice item category object. If no more invoice item categories are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your invoice item categories.
     */
    get: operations["listInvoiceItemCategories"];
    /** Creates a new invoice item category object. Returns an invoice item category object and a 201 Created response code if the call succeeded. */
    post: operations["createInvoiceItemCategory"];
  };
  "/invoice_item_categories/{invoiceItemCategoryId}": {
    /** Retrieves the invoice item category with the given ID. Returns an invoice item category object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveInvoiceItemCategory"];
    /** Delete an invoice item category. Deleting an invoice item category is only possible if use_as_service and use_as_expense are both false. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteInvoiceItemCategory"];
    /** Updates the specific invoice item category by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an invoice item category object and a 200 OK response code if the call succeeded. */
    patch: operations["updateInvoiceItemCategory"];
  };
  "/invoices": {
    /**
     * Returns a list of your invoices. The invoices are returned sorted by issue date, with the most recently issued invoices appearing first.
     *
     * The response contains an object with a invoices property that contains an array of up to per_page invoices. Each entry in the array is a separate invoice object. If no more invoices are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your invoices.
     */
    get: operations["listInvoices"];
    /** Creates a new invoice object. Returns an invoice object and a 201 Created response code if the call succeeded. */
    post: operations["createInvoice"];
  };
  "/invoices/{invoiceId}": {
    /** Retrieves the invoice with the given ID. Returns an invoice object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveInvoice"];
    /** Delete an invoice. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteInvoice"];
    /** Updates the specific invoice by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an invoice object and a 200 OK response code if the call succeeded. */
    patch: operations["updateInvoice"];
  };
  "/invoices/{invoiceId}/messages": {
    /**
     * Returns a list of messages associated with a given invoice. The invoice messages are returned sorted by creation date, with the most recently created messages appearing first.
     *
     * The response contains an object with an invoice_messages property that contains an array of up to per_page messages. Each entry in the array is a separate message object. If no more messages are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your messages.
     */
    get: operations["listMessagesForInvoice"];
    /** Creates a new invoice message object. Returns an invoice message object and a 201 Created response code if the call succeeded. */
    post: operations["createInvoiceMessage"];
  };
  "/invoices/{invoiceId}/messages/{messageId}": {
    /** Delete an invoice message. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteInvoiceMessage"];
  };
  "/invoices/{invoiceId}/payments": {
    /**
     * Returns a list of payments associate with a given invoice. The payments are returned sorted by creation date, with the most recently created payments appearing first.
     *
     * The response contains an object with an invoice_payments property that contains an array of up to per_page payments. Each entry in the array is a separate payment object. If no more payments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your payments.
     */
    get: operations["listPaymentsForInvoice"];
    /** Creates a new invoice payment object. Returns an invoice payment object and a 201 Created response code if the call succeeded. */
    post: operations["createInvoicePayment"];
  };
  "/invoices/{invoiceId}/payments/{paymentId}": {
    /** Delete an invoice payment. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteInvoicePayment"];
  };
  "/projects": {
    /**
     * Returns a list of your projects. The projects are returned sorted by creation date, with the most recently created projects appearing first.
     *
     * The response contains an object with a projects property that contains an array of up to per_page projects. Each entry in the array is a separate project object. If no more projects are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your projects.
     */
    get: operations["listProjects"];
    /** Creates a new project object. Returns a project object and a 201 Created response code if the call succeeded. */
    post: operations["createProject"];
  };
  "/projects/{projectId}": {
    /** Retrieves the project with the given ID. Returns a project object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveProject"];
    /**
     * Deletes a project and any time entries or expenses tracked to it.
     * However, invoices associated with the project will not be deleted.
     * If you don’t want the project’s time entries and expenses to be deleted, you should archive the project instead.
     */
    delete: operations["deleteProject"];
    /** Updates the specific project by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a project object and a 200 OK response code if the call succeeded. */
    patch: operations["updateProject"];
  };
  "/projects/{projectId}/task_assignments": {
    /**
     * Returns a list of your task assignments for the project identified by PROJECT_ID. The task assignments are returned sorted by creation date, with the most recently created task assignments appearing first.
     *
     * The response contains an object with a task_assignments property that contains an array of up to per_page task assignments. Each entry in the array is a separate task assignment object. If no more task assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your task assignments.
     */
    get: operations["listTaskAssignmentsForSpecificProject"];
    /** Creates a new task assignment object. Returns a task assignment object and a 201 Created response code if the call succeeded. */
    post: operations["createTaskAssignment"];
  };
  "/projects/{projectId}/task_assignments/{taskAssignmentId}": {
    /** Retrieves the task assignment with the given ID. Returns a task assignment object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveTaskAssignment"];
    /** Delete a task assignment. Deleting a task assignment is only possible if it has no time entries associated with it. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteTaskAssignment"];
    /** Updates the specific task assignment by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a task assignment object and a 200 OK response code if the call succeeded. */
    patch: operations["updateTaskAssignment"];
  };
  "/projects/{projectId}/user_assignments": {
    /**
     * Returns a list of user assignments for the project identified by PROJECT_ID. The user assignments are returned sorted by creation date, with the most recently created user assignments appearing first.
     *
     * The response contains an object with a user_assignments property that contains an array of up to per_page user assignments. Each entry in the array is a separate user assignment object. If no more user assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your user assignments.
     */
    get: operations["listUserAssignmentsForSpecificProject"];
    /** Creates a new user assignment object. Returns a user assignment object and a 201 Created response code if the call succeeded. */
    post: operations["createUserAssignment"];
  };
  "/projects/{projectId}/user_assignments/{userAssignmentId}": {
    /** Retrieves the user assignment with the given ID. Returns a user assignment object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveUserAssignment"];
    /** Delete a user assignment. Deleting a user assignment is only possible if it has no time entries or expenses associated with it. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteUserAssignment"];
    /** Updates the specific user assignment by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a user assignment object and a 200 OK response code if the call succeeded. */
    patch: operations["updateUserAssignment"];
  };
  "/reports/expenses/categories": {
    get: operations["expenseCategoriesReport"];
  };
  "/reports/expenses/clients": {
    get: operations["clientsExpensesReport"];
  };
  "/reports/expenses/projects": {
    get: operations["projectsExpensesReport"];
  };
  "/reports/expenses/team": {
    get: operations["teamExpensesReport"];
  };
  "/reports/project_budget": {
    /** The response contains an object with a results property that contains an array of up to per_page results. Each entry in the array is a separate result object. If no more results are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your results. */
    get: operations["projectBudgetReport"];
  };
  "/reports/time/clients": {
    get: operations["clientsTimeReport"];
  };
  "/reports/time/projects": {
    get: operations["projectsTimeReport"];
  };
  "/reports/time/tasks": {
    get: operations["tasksReport"];
  };
  "/reports/time/team": {
    get: operations["teamTimeReport"];
  };
  "/reports/uninvoiced": {
    /**
     * The response contains an object with a results property that contains an array of up to per_page results. Each entry in the array is a separate result object. If no more results are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your results.
     *
     * Note: Each request requires both the from and to parameters to be supplied in the URL’s query string. The timeframe supplied cannot exceed 1 year (365 days).
     */
    get: operations["uninvoicedReport"];
  };
  "/roles": {
    /**
     * Returns a list of roles in the account. The roles are returned sorted by creation date, with the most recently created roles appearing first.
     *
     * The response contains an object with a roles property that contains an array of up to per_page roles. Each entry in the array is a separate role object. If no more roles are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your roles.
     */
    get: operations["listRoles"];
    /** Creates a new role object. Returns a role object and a 201 Created response code if the call succeeded. */
    post: operations["createRole"];
  };
  "/roles/{roleId}": {
    /** Retrieves the role with the given ID. Returns a role object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveRole"];
    /** Delete a role. Deleting a role will unlink it from any users it was assigned to. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteRole"];
    /** Updates the specific role by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a role object and a 200 OK response code if the call succeeded. */
    patch: operations["updateRole"];
  };
  "/task_assignments": {
    /**
     * Returns a list of your task assignments. The task assignments are returned sorted by creation date, with the most recently created task assignments appearing first.
     *
     * The response contains an object with a task_assignments property that contains an array of up to per_page task assignments. Each entry in the array is a separate task assignment object. If no more task assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your task assignments.
     */
    get: operations["listTaskAssignments"];
  };
  "/tasks": {
    /**
     * Returns a list of your tasks. The tasks are returned sorted by creation date, with the most recently created tasks appearing first.
     *
     * The response contains an object with a tasks property that contains an array of up to per_page tasks. Each entry in the array is a separate task object. If no more tasks are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your tasks.
     */
    get: operations["listTasks"];
    /** Creates a new task object. Returns a task object and a 201 Created response code if the call succeeded. */
    post: operations["createTask"];
  };
  "/tasks/{taskId}": {
    /** Retrieves the task with the given ID. Returns a task object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveTask"];
    /** Delete a task. Deleting a task is only possible if it has no time entries associated with it. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteTask"];
    /** Updates the specific task by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a task object and a 200 OK response code if the call succeeded. */
    patch: operations["updateTask"];
  };
  "/time_entries": {
    /**
     * Returns a list of your time entries. The time entries are returned sorted by spent_at date. At this time, the sort option can’t be customized.
     *
     * The response contains an object with a time_entries property that contains an array of up to per_page time entries. Each entry in the array is a separate time entry object. If no more time entries are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your time entries.
     */
    get: operations["listTimeEntries"];
    /**
     * Creates a new time entry object. Returns a time entry object and a 201 Created response code if the call succeeded.
     *
     * You should only use this method to create time entries when your account is configured to track time via duration. You can verify this by visiting the Settings page in your Harvest account or by checking if wants_timestamp_timers is false in the Company API.
     */
    post: operations["createTimeEntry"];
  };
  "/time_entries/{timeEntryId}": {
    /** Retrieves the time entry with the given ID. Returns a time entry object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveTimeEntry"];
    /** Delete a time entry. Deleting a time entry is only possible if it’s not closed and the associated project and task haven’t been archived.  However, Admins can delete closed entries. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteTimeEntry"];
    /** Updates the specific time entry by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a time entry object and a 200 OK response code if the call succeeded. */
    patch: operations["updateTimeEntry"];
  };
  "/time_entries/{timeEntryId}/external_reference": {
    /** Delete a time entry’s external reference. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteTimeEntryExternalReference"];
  };
  "/time_entries/{timeEntryId}/restart": {
    /** Restarting a time entry is only possible if it isn’t currently running. Returns a 200 OK response code if the call succeeded. */
    patch: operations["restartStoppedTimeEntry"];
  };
  "/time_entries/{timeEntryId}/stop": {
    /** Stopping a time entry is only possible if it’s currently running. Returns a 200 OK response code if the call succeeded. */
    patch: operations["stopRunningTimeEntry"];
  };
  "/user_assignments": {
    /**
     * Returns a list of your projects user assignments, active and archived. The user assignments are returned sorted by creation date, with the most recently created user assignments appearing first.
     *
     * The response contains an object with a user_assignments property that contains an array of up to per_page user assignments. Each entry in the array is a separate user assignment object. If no more user assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your user assignments.
     */
    get: operations["listUserAssignments"];
  };
  "/users": {
    /**
     * Returns a list of your users. The users are returned sorted by creation date, with the most recently created users appearing first.
     *
     * The response contains an object with a users property that contains an array of up to per_page users. Each entry in the array is a separate user object. If no more users are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your users.
     */
    get: operations["listUsers"];
    /** Creates a new user object and sends an invitation email to the address specified in the email parameter. Returns a user object and a 201 Created response code if the call succeeded. */
    post: operations["createUser"];
  };
  "/users/me": {
    /** Retrieves the currently authenticated user. Returns a user object and a 200 OK response code. */
    get: operations["retrieveTheCurrentlyAuthenticatedUser"];
  };
  "/users/me/project_assignments": {
    /**
     * Returns a list of your active project assignments for the currently authenticated user. The project assignments are returned sorted by creation date, with the most recently created project assignments appearing first.
     *
     * The response contains an object with a project_assignments property that contains an array of up to per_page project assignments. Each entry in the array is a separate project assignment object. If no more project assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your project assignments.
     */
    get: operations["listActiveProjectAssignmentsForTheCurrentlyAuthenticatedUser"];
  };
  "/users/{userId}": {
    /** Retrieves the user with the given ID. Returns a user object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveUser"];
    /** Delete a user. Deleting a user is only possible if they have no time entries or expenses associated with them. Returns a 200 OK response code if the call succeeded. */
    delete: operations["deleteUser"];
    /** Updates the specific user by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a user object and a 200 OK response code if the call succeeded. */
    patch: operations["updateUser"];
  };
  "/users/{userId}/billable_rates": {
    /**
     * Returns a list of billable rates for the user identified by USER_ID. The billable rates are returned sorted by start_date, with the oldest starting billable rates appearing first.
     *
     * The response contains an object with a billable_rates property that contains an array of up to per_page billable rates. Each entry in the array is a separate billable rate object. If no more billable rates are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your billable rates.
     */
    get: operations["listBillableRatesForSpecificUser"];
    /**
     * Creates a new billable rate object. Returns a billable rate object and a 201 Created response code if the call succeeded.
     *
     *
     *   Creating a billable rate with no start_date will replace a user’s existing rate(s).
     *   Creating a billable rate with a start_date that is before a user’s existing rate(s) will replace those billable rates with the new one.
     */
    post: operations["createBillableRate"];
  };
  "/users/{userId}/billable_rates/{billableRateId}": {
    /** Retrieves the billable rate with the given ID. Returns a billable rate object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveBillableRate"];
  };
  "/users/{userId}/cost_rates": {
    /**
     * Returns a list of cost rates for the user identified by USER_ID. The cost rates are returned sorted by start_date, with the oldest starting cost rates appearing first.
     *
     * The response contains an object with a cost_rates property that contains an array of up to per_page cost rates. Each entry in the array is a separate cost rate object. If no more cost rates are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your cost rates.
     */
    get: operations["listCostRatesForSpecificUser"];
    /**
     * Creates a new cost rate object. Returns a cost rate object and a 201 Created response code if the call succeeded.
     *
     *
     *   Creating a cost rate with no start_date will replace a user’s existing rate(s).
     *   Creating a cost rate with a start_date that is before a user’s existing rate(s) will replace those cost rates with the new one.
     */
    post: operations["createCostRate"];
  };
  "/users/{userId}/cost_rates/{costRateId}": {
    /** Retrieves the cost rate with the given ID. Returns a cost rate object and a 200 OK response code if a valid identifier was provided. */
    get: operations["retrieveCostRate"];
  };
  "/users/{userId}/project_assignments": {
    /**
     * Returns a list of active project assignments for the user identified by USER_ID. The project assignments are returned sorted by creation date, with the most recently created project assignments appearing first.
     *
     * The response contains an object with a project_assignments property that contains an array of up to per_page project assignments. Each entry in the array is a separate project assignment object. If no more project assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your project assignments.
     */
    get: operations["listActiveProjectAssignments"];
  };
}

export interface components {
  schemas: {
    Contact: {
      /** Unique ID for the contact. */
      id?: number | null;
      /** An object containing the contact’s client id and name. */
      client?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** The title of the contact. */
      title?: string | null;
      /** The first name of the contact. */
      first_name?: string | null;
      /** The last name of the contact. */
      last_name?: string | null;
      /** The contact’s email address. */
      email?: string | null;
      /** The contact’s office phone number. */
      phone_office?: string | null;
      /** The contact’s mobile phone number. */
      phone_mobile?: string | null;
      /** The contact’s fax number. */
      fax?: string | null;
      /** Date and time the contact was created. */
      created_at?: string | null;
      /** Date and time the contact was last updated. */
      updated_at?: string | null;
    };
    Client: {
      /** Unique ID for the client. */
      id?: number | null;
      /** A textual description of the client. */
      name?: string | null;
      /** Whether the client is active or archived. */
      is_active?: boolean | null;
      /** The physical address for the client. */
      address?: string | null;
      /** Used to build a URL to your client’s invoice dashboard:https://{ACCOUNT_SUBDOMAIN}.harvestapp.com/client/invoices/{statement_key} */
      statement_key?: string | null;
      /** The currency code associated with this client. */
      currency?: string | null;
      /** Date and time the client was created. */
      created_at?: string | null;
      /** Date and time the client was last updated. */
      updated_at?: string | null;
    };
    Company: {
      /** The Harvest URL for the company. */
      base_uri?: string | null;
      /** The Harvest domain for the company. */
      full_domain?: string | null;
      /** The name of the company. */
      name?: string | null;
      /** Whether the company is active or archived. */
      is_active?: boolean | null;
      /** The weekday used as the start of the week. Returns one of: Saturday, Sunday, or Monday. */
      week_start_day?: string | null;
      /** Whether time is tracked via duration or start and end times. */
      wants_timestamp_timers?: boolean | null;
      /** The format used to display time in Harvest. Returns either decimal or hours_minutes. */
      time_format?: string | null;
      /** The type of plan the company is on. Examples: trial, free, or simple-v4 */
      plan_type?: string | null;
      /** Used to represent whether the company is using a 12-hour or 24-hour clock. Returns either 12h or 24h. */
      clock?: string | null;
      /** Symbol used when formatting decimals. */
      decimal_symbol?: string | null;
      /** Separator used when formatting numbers. */
      thousands_separator?: string | null;
      /** The color scheme being used in the Harvest web client. */
      color_scheme?: string | null;
      /** The weekly capacity in seconds. */
      weekly_capacity?: number | null;
      /** Whether the expense module is enabled. */
      expense_feature?: boolean | null;
      /** Whether the invoice module is enabled. */
      invoice_feature?: boolean | null;
      /** Whether the estimate module is enabled. */
      estimate_feature?: boolean | null;
      /** Whether the approval module is enabled. */
      approval_feature?: boolean | null;
    };
    InvoiceMessage: {
      /** Unique ID for the message. */
      id?: number | null;
      /** Name of the user that created the message. */
      sent_by?: string | null;
      /** Email of the user that created the message. */
      sent_by_email?: string | null;
      /** Name of the user that the message was sent from. */
      sent_from?: string | null;
      /** Email of the user that message was sent from. */
      sent_from_email?: string | null;
      /** Array of invoice message recipients. */
      recipients?: components["schemas"]["InvoiceMessageRecipient"][] | null;
      /** The message subject. */
      subject?: string | null;
      /** The message body. */
      body?: string | null;
      /** Whether to include a link to the client invoice in the message body. Not used when thank_you is true. */
      include_link_to_client_invoice?: boolean | null;
      /** Whether to attach the invoice PDF to the message email. */
      attach_pdf?: boolean | null;
      /** Whether to email a copy of the message to the current user. */
      send_me_a_copy?: boolean | null;
      /** Whether this is a thank you message. */
      thank_you?: boolean | null;
      /** The type of invoice event that occurred with the message: send, close, draft, re-open, or view. */
      event_type?: string | null;
      /** Whether this is a reminder message. */
      reminder?: boolean | null;
      /** The date the reminder email will be sent. */
      send_reminder_on?: string | null;
      /** Date and time the message was created. */
      created_at?: string | null;
      /** Date and time the message was last updated. */
      updated_at?: string | null;
    };
    InvoiceMessageRecipient: {
      /** Name of the message recipient. */
      name?: string | null;
      /** Email of the message recipient. */
      email?: string | null;
    };
    InvoicePayment: {
      /** Unique ID for the payment. */
      id?: number | null;
      /** The amount of the payment. */
      amount?: number | null;
      /** Date and time the payment was made. */
      paid_at?: string | null;
      /** Date the payment was made. */
      paid_date?: string | null;
      /** The name of the person who recorded the payment. */
      recorded_by?: string | null;
      /** The email of the person who recorded the payment. */
      recorded_by_email?: string | null;
      /** Any notes associated with the payment. */
      notes?: string | null;
      /** Either the card authorization or PayPal transaction ID. */
      transaction_id?: string | null;
      /** The payment gateway id and name used to process the payment. */
      payment_gateway?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** Date and time the payment was recorded. */
      created_at?: string | null;
      /** Date and time the payment was last updated. */
      updated_at?: string | null;
    };
    Invoice: {
      /** Unique ID for the invoice. */
      id?: number | null;
      /** An object containing invoice’s client id and name. */
      client?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** Array of invoice line items. */
      line_items?: components["schemas"]["InvoiceLineItem"][] | null;
      /** An object containing the associated estimate’s id. */
      estimate?: {
        id?: number | null;
      } | null;
      /** An object containing the associated retainer’s id. */
      retainer?: {
        id?: number | null;
      } | null;
      /** An object containing the id and name of the person that created the invoice. */
      creator?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** Used to build a URL to the public web invoice for your client:https://{ACCOUNT_SUBDOMAIN}.harvestapp.com/client/invoices/abc123456 */
      client_key?: string | null;
      /** If no value is set, the number will be automatically generated. */
      number?: string | null;
      /** The purchase order number. */
      purchase_order?: string | null;
      /** The total amount for the invoice, including any discounts and taxes. */
      amount?: number | null;
      /** The total amount due at this time for this invoice. */
      due_amount?: number | null;
      /** This percentage is applied to the subtotal, including line items and discounts. */
      tax?: number | null;
      /** The first amount of tax included, calculated from tax. If no tax is defined, this value will be null. */
      tax_amount?: number | null;
      /** This percentage is applied to the subtotal, including line items and discounts. */
      tax2?: number | null;
      /** The amount calculated from tax2. */
      tax2_amount?: number | null;
      /** This percentage is subtracted from the subtotal. */
      discount?: number | null;
      /** The amount calcuated from discount. */
      discount_amount?: number | null;
      /** The invoice subject. */
      subject?: string | null;
      /** Any additional notes included on the invoice. */
      notes?: string | null;
      /** The currency code associated with this invoice. */
      currency?: string | null;
      /** The current state of the invoice: draft, open, paid, or closed. */
      state?: string | null;
      /** Start of the period during which time entries were added to this invoice. */
      period_start?: string | null;
      /** End of the period during which time entries were added to this invoice. */
      period_end?: string | null;
      /** Date the invoice was issued. */
      issue_date?: string | null;
      /** Date the invoice is due. */
      due_date?: string | null;
      /** The timeframe in which the invoice should be paid. Options: upon receipt, net 15, net 30, net 45, net 60, or custom. */
      payment_term?: string | null;
      /** Date and time the invoice was sent. */
      sent_at?: string | null;
      /** Date and time the invoice was paid. */
      paid_at?: string | null;
      /** Date the invoice was paid. */
      paid_date?: string | null;
      /** Date and time the invoice was closed. */
      closed_at?: string | null;
      /** Unique ID of the associated recurring invoice. */
      recurring_invoice_id?: number | null;
      /** Date and time the invoice was created. */
      created_at?: string | null;
      /** Date and time the invoice was last updated. */
      updated_at?: string | null;
    };
    InvoiceLineItem: {
      /** Unique ID for the line item. */
      id?: number | null;
      /** An object containing the associated project’s id, name, and code. */
      project?: {
        id?: number | null;
        name?: string | null;
        code?: string | null;
      } | null;
      /** The name of an invoice item category. */
      kind?: string | null;
      /** Text description of the line item. */
      description?: string | null;
      /** The unit quantity of the item. */
      quantity?: number | null;
      /** The individual price per unit. */
      unit_price?: number | null;
      /** The line item subtotal (quantity * unit_price). */
      amount?: number | null;
      /** Whether the invoice’s tax percentage applies to this line item. */
      taxed?: boolean | null;
      /** Whether the invoice’s tax2 percentage applies to this line item. */
      taxed2?: boolean | null;
    };
    InvoiceItemCategory: {
      /** Unique ID for the invoice item category. */
      id?: number | null;
      /** The name of the invoice item category. */
      name?: string | null;
      /** Whether this invoice item category is used for billable hours when generating an invoice. */
      use_as_service?: boolean | null;
      /** Whether this invoice item category is used for expenses when generating an invoice. */
      use_as_expense?: boolean | null;
      /** Date and time the invoice item category was created. */
      created_at?: string | null;
      /** Date and time the invoice item category was last updated. */
      updated_at?: string | null;
    };
    EstimateMessage: {
      /** Unique ID for the message. */
      id?: number | null;
      /** Name of the user that created the message. */
      sent_by?: string | null;
      /** Email of the user that created the message. */
      sent_by_email?: string | null;
      /** Name of the user that the message was sent from. */
      sent_from?: string | null;
      /** Email of the user that message was sent from. */
      sent_from_email?: string | null;
      /** Array of estimate message recipients. */
      recipients?: components["schemas"]["EstimateMessageRecipient"][] | null;
      /** The message subject. */
      subject?: string | null;
      /** The message body. */
      body?: string | null;
      /** Whether to email a copy of the message to the current user. */
      send_me_a_copy?: boolean | null;
      /** The type of estimate event that occurred with the message: send, accept, decline, re-open, view, or invoice. */
      event_type?: string | null;
      /** Date and time the message was created. */
      created_at?: string | null;
      /** Date and time the message was last updated. */
      updated_at?: string | null;
    };
    EstimateMessageRecipient: {
      /** Name of the message recipient. */
      name?: string | null;
      /** Email of the message recipient. */
      email?: string | null;
    };
    Estimate: {
      /** Unique ID for the estimate. */
      id?: number | null;
      /** An object containing estimate’s client id and name. */
      client?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** Array of estimate line items. */
      line_items?: components["schemas"]["EstimateLineItem"][] | null;
      /** An object containing the id and name of the person that created the estimate. */
      creator?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** Used to build a URL to the public web invoice for your client:https://{ACCOUNT_SUBDOMAIN}.harvestapp.com/client/estimates/abc123456 */
      client_key?: string | null;
      /** If no value is set, the number will be automatically generated. */
      number?: string | null;
      /** The purchase order number. */
      purchase_order?: string | null;
      /** The total amount for the estimate, including any discounts and taxes. */
      amount?: number | null;
      /** This percentage is applied to the subtotal, including line items and discounts. */
      tax?: number | null;
      /** The first amount of tax included, calculated from tax. If no tax is defined, this value will be null. */
      tax_amount?: number | null;
      /** This percentage is applied to the subtotal, including line items and discounts. */
      tax2?: number | null;
      /** The amount calculated from tax2. */
      tax2_amount?: number | null;
      /** This percentage is subtracted from the subtotal. */
      discount?: number | null;
      /** The amount calcuated from discount. */
      discount_amount?: number | null;
      /** The estimate subject. */
      subject?: string | null;
      /** Any additional notes included on the estimate. */
      notes?: string | null;
      /** The currency code associated with this estimate. */
      currency?: string | null;
      /** The current state of the estimate: draft, sent, accepted, or declined. */
      state?: string | null;
      /** Date the estimate was issued. */
      issue_date?: string | null;
      /** Date and time the estimate was sent. */
      sent_at?: string | null;
      /** Date and time the estimate was accepted. */
      accepted_at?: string | null;
      /** Date and time the estimate was declined. */
      declined_at?: string | null;
      /** Date and time the estimate was created. */
      created_at?: string | null;
      /** Date and time the estimate was last updated. */
      updated_at?: string | null;
    };
    EstimateLineItem: {
      /** Unique ID for the line item. */
      id?: number | null;
      /** The name of an estimate item category. */
      kind?: string | null;
      /** Text description of the line item. */
      description?: string | null;
      /** The unit quantity of the item. */
      quantity?: number | null;
      /** The individual price per unit. */
      unit_price?: number | null;
      /** The line item subtotal (quantity * unit_price). */
      amount?: number | null;
      /** Whether the estimate’s tax percentage applies to this line item. */
      taxed?: boolean | null;
      /** Whether the estimate’s tax2 percentage applies to this line item. */
      taxed2?: boolean | null;
    };
    EstimateItemCategory: {
      /** Unique ID for the estimate item category. */
      id?: number | null;
      /** The name of the estimate item category. */
      name?: string | null;
      /** Date and time the estimate item category was created. */
      created_at?: string | null;
      /** Date and time the estimate item category was last updated. */
      updated_at?: string | null;
    };
    Expense: {
      /** Unique ID for the expense. */
      id?: number | null;
      /** An object containing the expense’s client id, name, and currency. */
      client?: {
        id?: number | null;
        name?: string | null;
        currency?: string | null;
      } | null;
      /** An object containing the expense’s project id, name, and code. */
      project?: {
        id?: number | null;
        name?: string | null;
        code?: string | null;
      } | null;
      /** An object containing the expense’s expense category id, name, unit_price, and unit_name. */
      expense_category?: {
        id?: number | null;
        name?: string | null;
        unit_price?: string | null;
        unit_name?: string | null;
      } | null;
      /** An object containing the id and name of the user that recorded the expense. */
      user?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** A user assignment object of the user that recorded the expense. */
      user_assignment?: components["schemas"]["UserAssignment"] | null;
      /** An object containing the expense’s receipt URL and file name. */
      receipt?: {
        url?: string | null;
        file_name?: string | null;
        file_size?: number | null;
        content_type?: string | null;
      } | null;
      /** Once the expense has been invoiced, this field will include the associated invoice’s id and number. */
      invoice?: {
        id?: number | null;
        number?: string | null;
      } | null;
      /** Textual notes used to describe the expense. */
      notes?: string | null;
      /** Whether the expense is billable or not. */
      billable?: boolean | null;
      /** Whether the expense has been approved or closed for some other reason. */
      is_closed?: boolean | null;
      /** Whether the expense has been been invoiced, approved, or the project or person related to the expense is archived. */
      is_locked?: boolean | null;
      /** Whether or not the expense has been marked as invoiced. */
      is_billed?: boolean | null;
      /** An explanation of why the expense has been locked. */
      locked_reason?: string | null;
      /** Date the expense occurred. */
      spent_date?: string | null;
      /** Date and time the expense was created. */
      created_at?: string | null;
      /** Date and time the expense was last updated. */
      updated_at?: string | null;
      /** The total amount of the expense. */
      total_cost?: number | null;
      /** The quantity of units to use in calculating the total_cost of the expense. */
      units?: number | null;
    };
    ExpenseCategory: {
      /** Unique ID for the expense category. */
      id?: number | null;
      /** The name of the expense category. */
      name?: string | null;
      /** The unit name of the expense category. */
      unit_name?: string | null;
      /** The unit price of the expense category. */
      unit_price?: number | null;
      /** Whether the expense category is active or archived. */
      is_active?: boolean | null;
      /** Date and time the expense category was created. */
      created_at?: string | null;
      /** Date and time the expense category was last updated. */
      updated_at?: string | null;
    };
    Task: {
      /** Unique ID for the task. */
      id?: number | null;
      /** The name of the task. */
      name?: string | null;
      /** Used in determining whether default tasks should be marked billable when creating a new project. */
      billable_by_default?: boolean | null;
      /** The hourly rate to use for this task when it is added to a project. */
      default_hourly_rate?: number | null;
      /** Whether this task should be automatically added to future projects. */
      is_default?: boolean | null;
      /** Whether this task is active or archived. */
      is_active?: boolean | null;
      /** Date and time the task was created. */
      created_at?: string | null;
      /** Date and time the task was last updated. */
      updated_at?: string | null;
    };
    TimeEntry: {
      /** Unique ID for the time entry. */
      id?: number | null;
      /** Date of the time entry. */
      spent_date?: string | null;
      /** An object containing the id and name of the associated user. */
      user?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** A user assignment object of the associated user. */
      user_assignment?: components["schemas"]["UserAssignment"] | null;
      /** An object containing the id and name of the associated client. */
      client?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** An object containing the id and name of the associated project. */
      project?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** An object containing the id and name of the associated task. */
      task?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** A task assignment object of the associated task. */
      task_assignment?: components["schemas"]["TaskAssignment"] | null;
      /** An object containing the id, group_id, permalink, service, and service_icon_url of the associated external reference. */
      external_reference?: {
        id?: string | null;
        group_id?: string | null;
        permalink?: string | null;
        service?: string | null;
        service_icon_url?: string | null;
      } | null;
      /** Once the time entry has been invoiced, this field will include the associated invoice’s id and number. */
      invoice?: {
        id?: number | null;
        number?: string | null;
      } | null;
      /** Number of (decimal time) hours tracked in this time entry. */
      hours?: number | null;
      /** Number of (decimal time) hours tracked in this time entry used in summary reports and invoices. This value is rounded according to the Time Rounding setting in your Preferences. */
      rounded_hours?: number | null;
      /** Notes attached to the time entry. */
      notes?: string | null;
      /** Whether or not the time entry has been locked. */
      is_locked?: boolean | null;
      /** Why the time entry has been locked. */
      locked_reason?: string | null;
      /** Whether or not the time entry has been approved via Timesheet Approval. */
      is_closed?: boolean | null;
      /** Whether or not the time entry has been marked as invoiced. */
      is_billed?: boolean | null;
      /** Date and time the timer was started (if tracking by duration). Use the ISO 8601 Format. */
      timer_started_at?: string | null;
      /** Time the time entry was started (if tracking by start/end times). */
      started_time?: string | null;
      /** Time the time entry was ended (if tracking by start/end times). */
      ended_time?: string | null;
      /** Whether or not the time entry is currently running. */
      is_running?: boolean | null;
      /** Whether or not the time entry is billable. */
      billable?: boolean | null;
      /** Whether or not the time entry counts towards the project budget. */
      budgeted?: boolean | null;
      /** The billable rate for the time entry. */
      billable_rate?: number | null;
      /** The cost rate for the time entry. */
      cost_rate?: number | null;
      /** Date and time the time entry was created. Use the ISO 8601 Format. */
      created_at?: string | null;
      /** Date and time the time entry was last updated. Use the ISO 8601 Format. */
      updated_at?: string | null;
    };
    UserAssignment: {
      /** Unique ID for the user assignment. */
      id?: number | null;
      /** An object containing the id, name, and code of the associated project. */
      project?: {
        id?: number | null;
        name?: string | null;
        code?: string | null;
      } | null;
      /** An object containing the id and name of the associated user. */
      user?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** Whether the user assignment is active or archived. */
      is_active?: boolean | null;
      /** Determines if the user has Project Manager permissions for the project. */
      is_project_manager?: boolean | null;
      /** Determines which billable rate(s) will be used on the project for this user when bill_by is People. When true, the project will use the user’s default billable rates. When false, the project will use the custom rate defined on this user assignment. */
      use_default_rates?: boolean | null;
      /** Custom rate used when the project’s bill_by is People and use_default_rates is false. */
      hourly_rate?: number | null;
      /** Budget used when the project’s budget_by is person. */
      budget?: number | null;
      /** Date and time the user assignment was created. */
      created_at?: string | null;
      /** Date and time the user assignment was last updated. */
      updated_at?: string | null;
    };
    TaskAssignment: {
      /** Unique ID for the task assignment. */
      id?: number | null;
      /** An object containing the id, name, and code of the associated project. */
      project?: {
        id?: number | null;
        name?: string | null;
        code?: string | null;
      } | null;
      /** An object containing the id and name of the associated task. */
      task?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** Whether the task assignment is active or archived. */
      is_active?: boolean | null;
      /** Whether the task assignment is billable or not.  For example: if set to true, all time tracked on this project for the associated task will be marked as billable. */
      billable?: boolean | null;
      /** Rate used when the project’s bill_by is Tasks. */
      hourly_rate?: number | null;
      /** Budget used when the project’s budget_by is task or task_fees. */
      budget?: number | null;
      /** Date and time the task assignment was created. */
      created_at?: string | null;
      /** Date and time the task assignment was last updated. */
      updated_at?: string | null;
    };
    Project: {
      /** Unique ID for the project. */
      id?: number | null;
      /** An object containing the project’s client id, name, and currency. */
      client?: {
        id?: number | null;
        name?: string | null;
        currency?: string | null;
      } | null;
      /** Unique name for the project. */
      name?: string | null;
      /** The code associated with the project. */
      code?: string | null;
      /** Whether the project is active or archived. */
      is_active?: boolean | null;
      /** Whether the project is billable or not. */
      is_billable?: boolean | null;
      /** Whether the project is a fixed-fee project or not. */
      is_fixed_fee?: boolean | null;
      /** The method by which the project is invoiced. */
      bill_by?: string | null;
      /** Rate for projects billed by Project Hourly Rate. */
      hourly_rate?: number | null;
      /** The budget in hours for the project when budgeting by time. */
      budget?: number | null;
      /** The method by which the project is budgeted. */
      budget_by?: string | null;
      /** Option to have the budget reset every month. */
      budget_is_monthly?: boolean | null;
      /** Whether Project Managers should be notified when the project goes over budget. */
      notify_when_over_budget?: boolean | null;
      /** Percentage value used to trigger over budget email alerts. */
      over_budget_notification_percentage?: number | null;
      /** Date of last over budget notification. If none have been sent, this will be null. */
      over_budget_notification_date?: string | null;
      /** Option to show project budget to all employees. Does not apply to Total Project Fee projects. */
      show_budget_to_all?: boolean | null;
      /** The monetary budget for the project when budgeting by money. */
      cost_budget?: number | null;
      /** Option for budget of Total Project Fees projects to include tracked expenses. */
      cost_budget_include_expenses?: boolean | null;
      /** The amount you plan to invoice for the project. Only used by fixed-fee projects. */
      fee?: number | null;
      /** Project notes. */
      notes?: string | null;
      /** Date the project was started. */
      starts_on?: string | null;
      /** Date the project will end. */
      ends_on?: string | null;
      /** Date and time the project was created. */
      created_at?: string | null;
      /** Date and time the project was last updated. */
      updated_at?: string | null;
    };
    Role: {
      /** Unique ID for the role. */
      id?: number | null;
      /** The name of the role. */
      name?: string | null;
      /** The IDs of the users assigned to this role. */
      user_ids?: number[] | null;
      /** Date and time the role was created. */
      created_at?: string | null;
      /** Date and time the role was last updated. */
      updated_at?: string | null;
    };
    BillableRate: {
      /** Unique ID for the billable rate. */
      id?: number | null;
      /** The amount of the billable rate. */
      amount?: number | null;
      /** The date the billable rate is effective. */
      start_date?: string | null;
      /** The date the billable rate is no longer effective. This date is calculated by Harvest. */
      end_date?: string | null;
      /** Date and time the billable rate was created. */
      created_at?: string | null;
      /** Date and time the billable rate was last updated. */
      updated_at?: string | null;
    };
    CostRate: {
      /** Unique ID for the cost rate. */
      id?: number | null;
      /** The amount of the cost rate. */
      amount?: number | null;
      /** The date the cost rate is effective. */
      start_date?: string | null;
      /** The date the cost rate is no longer effective. This date is calculated by Harvest. */
      end_date?: string | null;
      /** Date and time the cost rate was created. */
      created_at?: string | null;
      /** Date and time the cost rate was last updated. */
      updated_at?: string | null;
    };
    ProjectAssignment: {
      /** Unique ID for the project assignment. */
      id?: number | null;
      /** Whether the project assignment is active or archived. */
      is_active?: boolean | null;
      /** Determines if the user has Project Manager permissions for the project. */
      is_project_manager?: boolean | null;
      /** Determines which billable rate(s) will be used on the project for this user when bill_by is People. When true, the project will use the user’s default billable rates. When false, the project will use the custom rate defined on this user assignment. */
      use_default_rates?: boolean | null;
      /** Custom rate used when the project’s bill_by is People and use_default_rates is false. */
      hourly_rate?: number | null;
      /** Budget used when the project’s budget_by is person. */
      budget?: number | null;
      /** Date and time the project assignment was created. */
      created_at?: string | null;
      /** Date and time the project assignment was last updated. */
      updated_at?: string | null;
      /** An object containing the assigned project id, name, and code. */
      project?: {
        id?: number | null;
        name?: string | null;
        code?: string | null;
      } | null;
      /** An object containing the project’s client id and name. */
      client?: {
        id?: number | null;
        name?: string | null;
      } | null;
      /** Array of task assignment objects associated with the project. */
      task_assignments?: components["schemas"]["TaskAssignment"][] | null;
    };
    User: {
      /** Unique ID for the user. */
      id?: number | null;
      /** The first name of the user. */
      first_name?: string | null;
      /** The last name of the user. */
      last_name?: string | null;
      /** The email address of the user. */
      email?: string | null;
      /** The user’s timezone. */
      timezone?: string | null;
      /** Whether the user should be automatically added to future projects. */
      has_access_to_all_future_projects?: boolean | null;
      /** Whether the user is a contractor or an employee. */
      is_contractor?: boolean | null;
      /** Whether the user has Admin permissions. */
      is_admin?: boolean | null;
      /** Whether the user has Project Manager permissions. */
      is_project_manager?: boolean | null;
      /** Whether the user can see billable rates on projects. Only applicable to Project Managers. */
      can_see_rates?: boolean | null;
      /** Whether the user can create projects. Only applicable to Project Managers. */
      can_create_projects?: boolean | null;
      /** Whether the user can create invoices. Only applicable to Project Managers. */
      can_create_invoices?: boolean | null;
      /** Whether the user is active or archived. */
      is_active?: boolean | null;
      /** The number of hours per week this person is available to work in seconds, in half hour increments. For example, if a person’s capacity is 35 hours, the API will return 126000 seconds. */
      weekly_capacity?: number | null;
      /** The billable rate to use for this user when they are added to a project. */
      default_hourly_rate?: number | null;
      /** The cost rate to use for this user when calculating a project’s costs vs billable amount. */
      cost_rate?: number | null;
      /** The role names assigned to this person. */
      roles?: string[] | null;
      /** The URL to the user’s avatar image. */
      avatar_url?: string | null;
      /** Date and time the user was created. */
      created_at?: string | null;
      /** Date and time the user was last updated. */
      updated_at?: string | null;
    };
    ExpenseReportsResult: {
      /** The ID of the client associated with the reported expenses. Only returned in the Client and Project reports. */
      client_id?: number | null;
      /** The name of the client associated with the reported expenses. Only returned in the Client and Project reports. */
      client_name?: string | null;
      /** The ID of the project associated with the reported expenses. Only returned in the Client and Project reports. */
      project_id?: number | null;
      /** The name of the project associated with the reported expenses. Only returned in the Client and Project reports. */
      project_name?: string | null;
      /** The ID of the expense category associated with the reported expenses. Only returned in the Expense Category report. */
      expense_category_id?: number | null;
      /** The name of the expense category associated with the reported expenses. Only returned in the Expense Category report. */
      expense_category_name?: string | null;
      /** The ID of the user associated with the reported expenses. Only returned in the Team report. */
      user_id?: number | null;
      /** The name of the user associated with the reported expenses. Only returned in the Team report. */
      user_name?: string | null;
      /** The contractor status of the user associated with the reported expenses. Only returned in the Team report. */
      is_contractor?: boolean | null;
      /** The totaled cost for all expenses for the given timeframe, subject (client, project, expense category, or user), and currency. */
      total_amount?: number | null;
      /** The totaled cost for billable expenses for the given timeframe, subject (client, project, expense category, or user), and currency. */
      billable_amount?: number | null;
      /** The currency code associated with the expenses for this result. */
      currency?: string | null;
    };
    UninvoicedReportResult: {
      /** The ID of the client associated with the reported hours and expenses. */
      client_id?: number | null;
      /** The name of the client associated with the reported hours and expenses. */
      client_name?: string | null;
      /** The ID of the project associated with the reported hours and expenses. */
      project_id?: number | null;
      /** The name of the project associated with the reported hours and expenses. */
      project_name?: string | null;
      /** The currency code associated with the tracked hours for this result. */
      currency?: string | null;
      /** The total hours for the given timeframe and project. If Time Rounding is turned on, the hours will be rounded according to your settings. */
      total_hours?: number | null;
      /** The total hours for the given timeframe and project that have not been invoiced. If Time Rounding is turned on, the hours will be rounded according to your settings. */
      uninvoiced_hours?: number | null;
      /** The total amount for billable expenses for the timeframe and project that have not been invoiced. */
      uninvoiced_expenses?: number | null;
      /** The total amount (time and expenses) for the timeframe and project that have not been invoiced. */
      uninvoiced_amount?: number | null;
    };
    TimeReportsResult: {
      /** The ID of the client associated with the reported hours. Only returned in the Client and Project reports. */
      client_id?: number | null;
      /** The name of the client associated with the reported hours. Only returned in the Client and Project reports. */
      client_name?: string | null;
      /** The ID of the project associated with the reported hours. Only returned in the Client and Project reports. */
      project_id?: number | null;
      /** The name of the project associated with the reported hours. Only returned in the Client and Project reports. */
      project_name?: string | null;
      /** The ID of the task associated with the reported hours. Only returned in the Task report. */
      task_id?: number | null;
      /** The name of the task associated with the reported hours. Only returned in the Task report. */
      task_name?: string | null;
      /** The ID of the user associated with the reported hours. Only returned in the Team report. */
      user_id?: number | null;
      /** The name of the user associated with the reported hours. Only returned in the Team report. */
      user_name?: string | null;
      /** The contractor status of the user associated with the reported hours. Only returned in the Team report. */
      is_contractor?: boolean | null;
      /** The totaled hours for the given timeframe, subject (client, project, task, or user), and currency. If Time Rounding is turned on, the hours will be rounded according to your settings. */
      total_hours?: number | null;
      /** The totaled billable hours for the given timeframe, subject (client, project, task, or user), and currency. If Time Rounding is turned on, the hours will be rounded according to your settings. */
      billable_hours?: number | null;
      /** The currency code associated with the tracked hours for this result. Only visible to Administrators and Project Managers with the View billable rates and amounts permission. */
      currency?: string | null;
      /** The totaled billable amount for the billable hours above. Only visible to Administrators and Project Managers with the View billable rates and amounts permission. */
      billable_amount?: number | null;
    };
    ProjectBudgetReportResult: {
      /** The ID of the client associated with this project. */
      client_id?: number | null;
      /** The name of the client associated with this project. */
      client_name?: string | null;
      /** The ID of the project. */
      project_id?: number | null;
      /** The name of the project. */
      project_name?: string | null;
      /** Whether the budget is reset every month. */
      budget_is_monthly?: boolean | null;
      /** The method by which the project is budgeted. Options: project (Hours Per Project), project_cost (Total Project Fees), task (Hours Per Task), task_fees (Fees Per Task), person (Hours Per Person), none (No Budget). */
      budget_by?: string | null;
      /** Whether the project is active or archived. */
      is_active?: boolean | null;
      /** The budget in hours or money for the project when budgeting by time. If the project is budgeted by money, this value will only be visible to Administrators and Project Managers with the View billable rates and amounts permission. */
      budget?: number | null;
      /** The total hours or money spent against the project’s budget. If Time Rounding is turned on, the hours will be rounded according to your settings. If the project is budgeted by money, this value will only be visible to Administrators and Project Managers with the View billable rates and amounts permission. */
      budget_spent?: number | null;
      /** The total hours or money remaining in the project’s budget. If Time Rounding is turned on, the hours will be rounded according to your settings. If the project is budgeted by money, this value will only be visible to Administrators and Project Managers with the View billable rates and amounts permission. */
      budget_remaining?: number | null;
    };
    Contacts: {
      contacts: components["schemas"]["Contact"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    Clients: {
      clients: components["schemas"]["Client"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    Companies: {
      companies: components["schemas"]["Company"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    InvoiceMessages: {
      invoice_messages: components["schemas"]["InvoiceMessage"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    InvoiceMessageRecipients: {
      invoice_message_recipients: components["schemas"]["InvoiceMessageRecipient"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    InvoicePayments: {
      invoice_payments: components["schemas"]["InvoicePayment"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    Invoices: {
      invoices: components["schemas"]["Invoice"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    InvoiceLineItems: {
      invoice_line_items: components["schemas"]["InvoiceLineItem"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    InvoiceItemCategories: {
      invoice_item_categories: components["schemas"]["InvoiceItemCategory"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    EstimateMessages: {
      estimate_messages: components["schemas"]["EstimateMessage"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    EstimateMessageRecipients: {
      estimate_message_recipients: components["schemas"]["EstimateMessageRecipient"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    Estimates: {
      estimates: components["schemas"]["Estimate"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    EstimateLineItems: {
      estimate_line_items: components["schemas"]["EstimateLineItem"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    EstimateItemCategories: {
      estimate_item_categories: components["schemas"]["EstimateItemCategory"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    Expenses: {
      expenses: components["schemas"]["Expense"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    ExpenseCategories: {
      expense_categories: components["schemas"]["ExpenseCategory"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    Tasks: {
      tasks: components["schemas"]["Task"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    TimeEntries: {
      time_entries: components["schemas"]["TimeEntry"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    UserAssignments: {
      user_assignments: components["schemas"]["UserAssignment"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    TaskAssignments: {
      task_assignments: components["schemas"]["TaskAssignment"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    Projects: {
      projects: components["schemas"]["Project"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    Roles: {
      roles: components["schemas"]["Role"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    BillableRates: {
      billable_rates: components["schemas"]["BillableRate"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    CostRates: {
      cost_rates: components["schemas"]["CostRate"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    ProjectAssignments: {
      project_assignments: components["schemas"]["ProjectAssignment"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    Users: {
      users: components["schemas"]["User"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    ExpenseReportsResults: {
      results: components["schemas"]["ExpenseReportsResult"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    UninvoicedReportResults: {
      results: components["schemas"]["UninvoicedReportResult"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    TimeReportsResults: {
      results: components["schemas"]["TimeReportsResult"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    ProjectBudgetReportResults: {
      results: components["schemas"]["ProjectBudgetReportResult"][];
      per_page: number;
      total_pages: number;
      total_entries: number;
      next_page: number | null;
      previous_page: number | null;
      page: number;
      links: components["schemas"]["PaginationLinks"];
    };
    Error: {
      code?: number;
      message?: string;
    };
    PaginationLinks: {
      /** First page */
      first: string;
      /** Last page */
      last: string;
      /** Previous page */
      previous?: string | null;
      /** Next page */
      next?: string | null;
    };
  };
}

export interface operations {
  /**
   * Returns a list of your clients. The clients are returned sorted by creation date, with the most recently created clients appearing first.
   *
   * The response contains an object with a clients property that contains an array of up to per_page clients. Each entry in the array is a separate client object. If no more clients are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your clients.
   */
  listClients: {
    parameters: {
      query: {
        /** Pass true to only return active clients and false to return inactive clients. */
        is_active?: boolean;
        /** Only return clients that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all clients */
      200: {
        content: {
          "application/json": components["schemas"]["Clients"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new client object. Returns a client object and a 201 Created response code if the call succeeded. */
  createClient: {
    responses: {
      /** Create a client */
      201: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** A textual description of the client. */
          name: string | null;
          /** Whether the client is active, or archived. Defaults to true. */
          is_active?: boolean | null;
          /** A textual representation of the client’s physical address. May include new line characters. */
          address?: string | null;
          /** The currency used by the client. If not provided, the company’s currency will be used. See a list of supported currencies */
          currency?: string | null;
        };
      };
    };
  };
  /** Retrieves the client with the given ID. Returns a client object and a 200 OK response code if a valid identifier was provided. */
  retrieveClient: {
    parameters: {
      path: {
        clientId: string;
      };
    };
    responses: {
      /** Retrieve a client */
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a client. Deleting a client is only possible if it has no projects, invoices, or estimates associated with it. Returns a 200 OK response code if the call succeeded. */
  deleteClient: {
    parameters: {
      path: {
        clientId: string;
      };
    };
    responses: {
      /** Delete a client */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific client by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a client object and a 200 OK response code if the call succeeded. */
  updateClient: {
    parameters: {
      path: {
        clientId: string;
      };
    };
    responses: {
      /** Update a client */
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** A textual description of the client. */
          name?: string | null;
          /** Whether the client is active, or archived. */
          is_active?: boolean | null;
          /** A textual representation of the client’s physical address. May include new line characters. */
          address?: string | null;
          /** The currency used by the client. See a list of supported currencies */
          currency?: string | null;
        };
      };
    };
  };
  /**
   * Retrieves the company for the currently authenticated user. Returns a
   * company object and a 200 OK response code.
   */
  retrieveCompany: {
    responses: {
      /** Retrieve a company */
      200: {
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the company setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a company object and a 200 OK response code if the call succeeded. */
  updateCompany: {
    responses: {
      /** Update a company */
      200: {
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** Whether time is tracked via duration or start and end times. */
          wants_timestamp_timers?: boolean | null;
          /** The weekly capacity in seconds. */
          weekly_capacity?: number | null;
        };
      };
    };
  };
  /**
   * Returns a list of your contacts. The contacts are returned sorted by creation date, with the most recently created contacts appearing first.
   *
   * The response contains an object with a contacts property that contains an array of up to per_page contacts. Each entry in the array is a separate contact object. If no more contacts are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your contacts.
   */
  listContacts: {
    parameters: {
      query: {
        /** Only return contacts belonging to the client with the given ID. */
        client_id?: number;
        /** Only return contacts that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all contacts */
      200: {
        content: {
          "application/json": components["schemas"]["Contacts"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new contact object. Returns a contact object and a 201 Created response code if the call succeeded. */
  createContact: {
    responses: {
      /** Create a contact */
      201: {
        content: {
          "application/json": components["schemas"]["Contact"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the client associated with this contact. */
          client_id: number | null;
          /** The title of the contact. */
          title?: string | null;
          /** The first name of the contact. */
          first_name: string | null;
          /** The last name of the contact. */
          last_name?: string | null;
          /** The contact’s email address. */
          email?: string | null;
          /** The contact’s office phone number. */
          phone_office?: string | null;
          /** The contact’s mobile phone number. */
          phone_mobile?: string | null;
          /** The contact’s fax number. */
          fax?: string | null;
        };
      };
    };
  };
  /** Retrieves the contact with the given ID. Returns a contact object and a 200 OK response code if a valid identifier was provided. */
  retrieveContact: {
    parameters: {
      path: {
        contactId: string;
      };
    };
    responses: {
      /** Retrieve a contact */
      200: {
        content: {
          "application/json": components["schemas"]["Contact"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a contact. Returns a 200 OK response code if the call succeeded. */
  deleteContact: {
    parameters: {
      path: {
        contactId: string;
      };
    };
    responses: {
      /** Delete a contact */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific contact by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a contact object and a 200 OK response code if the call succeeded. */
  updateContact: {
    parameters: {
      path: {
        contactId: string;
      };
    };
    responses: {
      /** Update a contact */
      200: {
        content: {
          "application/json": components["schemas"]["Contact"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the client associated with this contact. */
          client_id?: number | null;
          /** The title of the contact. */
          title?: string | null;
          /** The first name of the contact. */
          first_name?: string | null;
          /** The last name of the contact. */
          last_name?: string | null;
          /** The contact’s email address. */
          email?: string | null;
          /** The contact’s office phone number. */
          phone_office?: string | null;
          /** The contact’s mobile phone number. */
          phone_mobile?: string | null;
          /** The contact’s fax number. */
          fax?: string | null;
        };
      };
    };
  };
  /**
   * Returns a list of your estimate item categories. The estimate item categories are returned sorted by creation date, with the most recently created estimate item categories appearing first.
   *
   * The response contains an object with a estimate_item_categories property that contains an array of up to per_page estimate item categories. Each entry in the array is a separate estimate item category object. If no more estimate item categories are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your estimate item categories.
   */
  listEstimateItemCategories: {
    parameters: {
      query: {
        /** Only return estimate item categories that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all estimate item categories */
      200: {
        content: {
          "application/json": components["schemas"]["EstimateItemCategories"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new estimate item category object. Returns an estimate item category object and a 201 Created response code if the call succeeded. */
  createEstimateItemCategory: {
    responses: {
      /** Create an estimate item category */
      201: {
        content: {
          "application/json": components["schemas"]["EstimateItemCategory"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The name of the estimate item category. */
          name: string | null;
        };
      };
    };
  };
  /** Retrieves the estimate item category with the given ID. Returns an estimate item category object and a 200 OK response code if a valid identifier was provided. */
  retrieveEstimateItemCategory: {
    parameters: {
      path: {
        estimateItemCategoryId: string;
      };
    };
    responses: {
      /** Retrieve an estimate item category */
      200: {
        content: {
          "application/json": components["schemas"]["EstimateItemCategory"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete an estimate item category. Returns a 200 OK response code if the call succeeded. */
  deleteEstimateItemCategory: {
    parameters: {
      path: {
        estimateItemCategoryId: string;
      };
    };
    responses: {
      /** Delete an estimate item category */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific estimate item category by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an estimate item category object and a 200 OK response code if the call succeeded. */
  updateEstimateItemCategory: {
    parameters: {
      path: {
        estimateItemCategoryId: string;
      };
    };
    responses: {
      /** Update an estimate item category */
      200: {
        content: {
          "application/json": components["schemas"]["EstimateItemCategory"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The name of the estimate item category. */
          name?: string | null;
        };
      };
    };
  };
  /**
   * Returns a list of your estimates. The estimates are returned sorted by issue date, with the most recently issued estimates appearing first.
   *
   * The response contains an object with a estimates property that contains an array of up to per_page estimates. Each entry in the array is a separate estimate object. If no more estimates are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your estimates.
   */
  listEstimates: {
    parameters: {
      query: {
        /** Only return estimates belonging to the client with the given ID. */
        client_id?: number;
        /** Only return estimates that have been updated since the given date and time. */
        updated_since?: string;
        /** Only return estimates with an issue_date on or after the given date. */
        from?: string;
        /** Only return estimates with an issue_date on or before the given date. */
        to?: string;
        /** Only return estimates with a state matching the value provided. Options: draft, sent, accepted, or declined. */
        state?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all estimates */
      200: {
        content: {
          "application/json": components["schemas"]["Estimates"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new estimate object. Returns an estimate object and a 201 Created response code if the call succeeded. */
  createEstimate: {
    responses: {
      /** Create an estimate */
      201: {
        content: {
          "application/json": components["schemas"]["Estimate"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the client this estimate belongs to. */
          client_id: number | null;
          /** If no value is set, the number will be automatically generated. */
          number?: string | null;
          /** The purchase order number. */
          purchase_order?: string | null;
          /** This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%. */
          tax?: number | null;
          /** This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%. */
          tax2?: number | null;
          /** This percentage is subtracted from the subtotal. Example: use 10.0 for 10.0%. */
          discount?: number | null;
          /** The estimate subject. */
          subject?: string | null;
          /** Any additional notes to include on the estimate. */
          notes?: string | null;
          /** The currency used by the estimate. If not provided, the client’s currency will be used. See a list of supported currencies */
          currency?: string | null;
          /** Date the estimate was issued. Defaults to today’s date. */
          issue_date?: string | null;
          /** Array of line item parameters */
          line_items?:
            | {
                /** The name of an estimate item category. */
                kind: string;
                /** Text description of the line item. */
                description?: string;
                /** The unit quantity of the item. Defaults to 1. */
                quantity?: number;
                /** The individual price per unit. */
                unit_price: number;
                /** Whether the estimate’s tax percentage applies to this line item. Defaults to false. */
                taxed?: boolean;
                /** Whether the estimate’s tax2 percentage applies to this line item. Defaults to false. */
                taxed2?: boolean;
              }[]
            | null;
        };
      };
    };
  };
  /** Retrieves the estimate with the given ID. Returns an estimate object and a 200 OK response code if a valid identifier was provided. */
  retrieveEstimate: {
    parameters: {
      path: {
        estimateId: string;
      };
    };
    responses: {
      /** Retrieve an estimate */
      200: {
        content: {
          "application/json": components["schemas"]["Estimate"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete an estimate. Returns a 200 OK response code if the call succeeded. */
  deleteEstimate: {
    parameters: {
      path: {
        estimateId: string;
      };
    };
    responses: {
      /** Delete an estimate */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific estimate by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an estimate object and a 200 OK response code if the call succeeded. */
  updateEstimate: {
    parameters: {
      path: {
        estimateId: string;
      };
    };
    responses: {
      /** Update an estimate */
      200: {
        content: {
          "application/json": components["schemas"]["Estimate"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the client this estimate belongs to. */
          client_id?: number | null;
          /** If no value is set, the number will be automatically generated. */
          number?: string | null;
          /** The purchase order number. */
          purchase_order?: string | null;
          /** This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%. */
          tax?: number | null;
          /** This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%. */
          tax2?: number | null;
          /** This percentage is subtracted from the subtotal. Example: use 10.0 for 10.0%. */
          discount?: number | null;
          /** The estimate subject. */
          subject?: string | null;
          /** Any additional notes to include on the estimate. */
          notes?: string | null;
          /** The currency used by the estimate. If not provided, the client’s currency will be used. See a list of supported currencies */
          currency?: string | null;
          /** Date the estimate was issued. */
          issue_date?: string | null;
          /** Array of line item parameters */
          line_items?:
            | {
                /** Unique ID for the line item. */
                id?: number;
                /** The name of an estimate item category. */
                kind?: string;
                /** Text description of the line item. */
                description?: string;
                /** The unit quantity of the item. Defaults to 1. */
                quantity?: number;
                /** The individual price per unit. */
                unit_price?: number;
                /** Whether the estimate’s tax percentage applies to this line item. Defaults to false. */
                taxed?: boolean;
                /** Whether the estimate’s tax2 percentage applies to this line item. Defaults to false. */
                taxed2?: boolean;
              }[]
            | null;
        };
      };
    };
  };
  /**
   * Returns a list of messages associated with a given estimate. The estimate messages are returned sorted by creation date, with the most recently created messages appearing first.
   *
   * The response contains an object with an estimate_messages property that contains an array of up to per_page messages. Each entry in the array is a separate message object. If no more messages are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your messages.
   */
  listMessagesForEstimate: {
    parameters: {
      path: {
        estimateId: string;
      };
      query: {
        /** Only return estimate messages that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all messages for an estimate */
      200: {
        content: {
          "application/json": components["schemas"]["EstimateMessages"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new estimate message object. Returns an estimate message object and a 201 Created response code if the call succeeded. */
  createEstimateMessage: {
    parameters: {
      path: {
        estimateId: string;
      };
    };
    responses: {
      /** Create an estimate message or change estimate status */
      201: {
        content: {
          "application/json": components["schemas"]["EstimateMessage"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** If provided, runs an event against the estimate. Options: “accept”, “decline”, “re-open”, or “send”. */
          event_type?: string | null;
          /** Array of recipient parameters. See below for details. */
          recipients:
            | {
                /** Name of the message recipient. */
                name?: string;
                /** Email of the message recipient. */
                email: string;
              }[]
            | null;
          /** The message subject. */
          subject?: string | null;
          /** The message body. */
          body?: string | null;
          /** If set to true, a copy of the message email will be sent to the current user. Defaults to false. */
          send_me_a_copy?: boolean | null;
        };
      };
    };
  };
  /** Delete an estimate message. Returns a 200 OK response code if the call succeeded. */
  deleteEstimateMessage: {
    parameters: {
      path: {
        estimateId: string;
        messageId: string;
      };
    };
    responses: {
      /** Delete an estimate message */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Returns a list of your expense categories. The expense categories are returned sorted by creation date, with the most recently created expense categories appearing first.
   *
   * The response contains an object with a expense_categories property that contains an array of up to per_page expense categories. Each entry in the array is a separate expense category object. If no more expense categories are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your expense categories.
   */
  listExpenseCategories: {
    parameters: {
      query: {
        /** Pass true to only return active expense categories and false to return inactive expense categories. */
        is_active?: boolean;
        /** Only return expense categories that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all expense categories */
      200: {
        content: {
          "application/json": components["schemas"]["ExpenseCategories"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new expense category object. Returns an expense category object and a 201 Created response code if the call succeeded. */
  createExpenseCategory: {
    responses: {
      /** Create an expense category */
      201: {
        content: {
          "application/json": components["schemas"]["ExpenseCategory"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The name of the expense category. */
          name: string | null;
          /** The unit name of the expense category. */
          unit_name?: string | null;
          /** The unit price of the expense category. */
          unit_price?: number | null;
          /** Whether the expense category is active or archived. Defaults to true. */
          is_active?: boolean | null;
        };
      };
    };
  };
  /** Retrieves the expense category with the given ID. Returns an expense category object and a 200 OK response code if a valid identifier was provided. */
  retrieveExpenseCategory: {
    parameters: {
      path: {
        expenseCategoryId: string;
      };
    };
    responses: {
      /** Retrieve an expense category */
      200: {
        content: {
          "application/json": components["schemas"]["ExpenseCategory"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete an expense category. Returns a 200 OK response code if the call succeeded. */
  deleteExpenseCategory: {
    parameters: {
      path: {
        expenseCategoryId: string;
      };
    };
    responses: {
      /** Delete an expense category */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific expense category by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an expense category object and a 200 OK response code if the call succeeded. */
  updateExpenseCategory: {
    parameters: {
      path: {
        expenseCategoryId: string;
      };
    };
    responses: {
      /** Update an expense category */
      200: {
        content: {
          "application/json": components["schemas"]["ExpenseCategory"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The name of the expense category. */
          name?: string | null;
          /** The unit name of the expense category. */
          unit_name?: string | null;
          /** The unit price of the expense category. */
          unit_price?: number | null;
          /** Whether the expense category is active or archived. */
          is_active?: boolean | null;
        };
      };
    };
  };
  /**
   * Returns a list of your expenses. If accessing this endpoint as an Admin, all expenses in the account will be returned. The expenses are returned sorted by the spent_at date, with the most recent expenses appearing first.
   *
   * The response contains an object with a expenses property that contains an array of up to per_page expenses. Each entry in the array is a separate expense object. If no more expenses are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your expenses.
   */
  listExpenses: {
    parameters: {
      query: {
        /** Only return expenses belonging to the user with the given ID. */
        user_id?: number;
        /** Only return expenses belonging to the client with the given ID. */
        client_id?: number;
        /** Only return expenses belonging to the project with the given ID. */
        project_id?: number;
        /** Pass true to only return expenses that have been invoiced and false to return expenses that have not been invoiced. */
        is_billed?: boolean;
        /** Only return expenses that have been updated since the given date and time. */
        updated_since?: string;
        /** Only return expenses with a spent_date on or after the given date. */
        from?: string;
        /** Only return expenses with a spent_date on or before the given date. */
        to?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all expenses */
      200: {
        content: {
          "application/json": components["schemas"]["Expenses"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new expense object. Returns an expense object and a 201 Created response code if the call succeeded. */
  createExpense: {
    responses: {
      /** Create an expense */
      201: {
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the user associated with this expense.  Defaults to the ID of the currently authenticated user. */
          user_id?: number | null;
          /** The ID of the project associated with this expense. */
          project_id: number | null;
          /** The ID of the expense category this expense is being tracked against. */
          expense_category_id: number | null;
          /** Date the expense occurred. */
          spent_date: string | null;
          /** The quantity of units to use in calculating the total_cost of the expense. */
          units?: number | null;
          /** The total amount of the expense. */
          total_cost?: number | null;
          /** Textual notes used to describe the expense. */
          notes?: string | null;
          /** Whether this expense is billable or not. Defaults to true. */
          billable?: boolean | null;
          /** A receipt file to attach to the expense. If including a receipt, you must submit a multipart/form-data request. */
          receipt?: string | null;
        };
      };
    };
  };
  /** Retrieves the expense with the given ID. Returns an expense object and a 200 OK response code if a valid identifier was provided. */
  retrieveExpense: {
    parameters: {
      path: {
        expenseId: string;
      };
    };
    responses: {
      /** Retrieve an expense */
      200: {
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete an expense. Returns a 200 OK response code if the call succeeded. */
  deleteExpense: {
    parameters: {
      path: {
        expenseId: string;
      };
    };
    responses: {
      /** Delete an expense */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific expense by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an expense object and a 200 OK response code if the call succeeded. */
  updateExpense: {
    parameters: {
      path: {
        expenseId: string;
      };
    };
    responses: {
      /** Update an expense */
      200: {
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the project associated with this expense. */
          project_id?: number | null;
          /** The ID of the expense category this expense is being tracked against. */
          expense_category_id?: number | null;
          /** Date the expense occurred. */
          spent_date?: string | null;
          /** The quantity of units to use in calculating the total_cost of the expense. */
          units?: number | null;
          /** The total amount of the expense. */
          total_cost?: number | null;
          /** Textual notes used to describe the expense. */
          notes?: string | null;
          /** Whether this expense is billable or not. Defaults to true. */
          billable?: boolean | null;
          /** A receipt file to attach to the expense. If including a receipt, you must submit a multipart/form-data request. */
          receipt?: string | null;
          /** Whether an attached expense receipt should be deleted. Pass true to delete the expense receipt. */
          delete_receipt?: boolean | null;
        };
      };
    };
  };
  /**
   * Returns a list of your invoice item categories. The invoice item categories are returned sorted by creation date, with the most recently created invoice item categories appearing first.
   *
   * The response contains an object with a invoice_item_categories property that contains an array of up to per_page invoice item categories. Each entry in the array is a separate invoice item category object. If no more invoice item categories are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your invoice item categories.
   */
  listInvoiceItemCategories: {
    parameters: {
      query: {
        /** Only return invoice item categories that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all invoice item categories */
      200: {
        content: {
          "application/json": components["schemas"]["InvoiceItemCategories"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new invoice item category object. Returns an invoice item category object and a 201 Created response code if the call succeeded. */
  createInvoiceItemCategory: {
    responses: {
      /** Create an invoice item category */
      201: {
        content: {
          "application/json": components["schemas"]["InvoiceItemCategory"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The name of the invoice item category. */
          name: string | null;
        };
      };
    };
  };
  /** Retrieves the invoice item category with the given ID. Returns an invoice item category object and a 200 OK response code if a valid identifier was provided. */
  retrieveInvoiceItemCategory: {
    parameters: {
      path: {
        invoiceItemCategoryId: string;
      };
    };
    responses: {
      /** Retrieve an invoice item category */
      200: {
        content: {
          "application/json": components["schemas"]["InvoiceItemCategory"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete an invoice item category. Deleting an invoice item category is only possible if use_as_service and use_as_expense are both false. Returns a 200 OK response code if the call succeeded. */
  deleteInvoiceItemCategory: {
    parameters: {
      path: {
        invoiceItemCategoryId: string;
      };
    };
    responses: {
      /** Delete an invoice item category */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific invoice item category by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an invoice item category object and a 200 OK response code if the call succeeded. */
  updateInvoiceItemCategory: {
    parameters: {
      path: {
        invoiceItemCategoryId: string;
      };
    };
    responses: {
      /** Update an invoice item category */
      200: {
        content: {
          "application/json": components["schemas"]["InvoiceItemCategory"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The name of the invoice item category. */
          name?: string | null;
        };
      };
    };
  };
  /**
   * Returns a list of your invoices. The invoices are returned sorted by issue date, with the most recently issued invoices appearing first.
   *
   * The response contains an object with a invoices property that contains an array of up to per_page invoices. Each entry in the array is a separate invoice object. If no more invoices are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your invoices.
   */
  listInvoices: {
    parameters: {
      query: {
        /** Only return invoices belonging to the client with the given ID. */
        client_id?: number;
        /** Only return invoices associated with the project with the given ID. */
        project_id?: number;
        /** Only return invoices that have been updated since the given date and time. */
        updated_since?: string;
        /** Only return invoices with an issue_date on or after the given date. */
        from?: string;
        /** Only return invoices with an issue_date on or before the given date. */
        to?: string;
        /** Only return invoices with a state matching the value provided. Options: draft, open, paid, or closed. */
        state?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all invoices */
      200: {
        content: {
          "application/json": components["schemas"]["Invoices"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new invoice object. Returns an invoice object and a 201 Created response code if the call succeeded. */
  createInvoice: {
    responses: {
      /** Create an invoice */
      201: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the client this invoice belongs to. */
          client_id: number | null;
          /** The ID of the retainer associated with this invoice. */
          retainer_id?: number | null;
          /** The ID of the estimate associated with this invoice. */
          estimate_id?: number | null;
          /** If no value is set, the number will be automatically generated. */
          number?: string | null;
          /** The purchase order number. */
          purchase_order?: string | null;
          /** This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%. */
          tax?: number | null;
          /** This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%. */
          tax2?: number | null;
          /** This percentage is subtracted from the subtotal. Example: use 10.0 for 10.0%. */
          discount?: number | null;
          /** The invoice subject. */
          subject?: string | null;
          /** Any additional notes to include on the invoice. */
          notes?: string | null;
          /** The currency used by the invoice. If not provided, the client’s currency will be used. See a list of supported currencies */
          currency?: string | null;
          /** Date the invoice was issued. Defaults to today’s date. */
          issue_date?: string | null;
          /** Date the invoice is due. Defaults to the issue_date if no payment_term is specified. To set a custom due_date the payment_term must also be set to custom, otherwise the value supplied in the request for due_date will be ignored and the due_date will be calucated using the issue_date and the payment_term. */
          due_date?: string | null;
          /** The timeframe in which the invoice should be paid. Defaults to custom. Options: upon receipt, net 15, net 30, net 45, net 60, or custom. */
          payment_term?: string | null;
          /** An line items import object */
          line_items_import?: {
            /** An array of the client’s project IDs you’d like to include time/expenses from. */
            project_ids: number[];
            /** An time import object. */
            time?: {
              /** How to summarize the time entries per line item. Options: project, task, people, or detailed. */
              summary_type: string;
              /** Start date for included time entries. Must be provided if to is present. If neither from or to are provided, all unbilled time entries will be included. */
              from?: string;
              /** End date for included time entries. Must be provided if from is present. If neither from or to are provided, all unbilled time entries will be included. */
              to?: string;
            };
            /** An expense import object. */
            expenses?: {
              /** How to summarize the expenses per line item. Options: project, category, people, or detailed. */
              summary_type: string;
              /** Start date for included expenses. Must be provided if to is present. If neither from or to are provided, all unbilled expenses will be included. */
              from?: string;
              /** End date for included expenses. Must be provided if from is present. If neither from or to are provided, all unbilled expenses will be included. */
              to?: string;
              /** If set to true, a PDF containing an expense report with receipts will be attached to the invoice. Defaults to false. */
              attach_receipt?: boolean;
            };
          } | null;
          /** Array of line item parameters */
          line_items?:
            | {
                /** The ID of the project associated with this line item. */
                project_id?: number;
                /** The name of an invoice item category. */
                kind: string;
                /** Text description of the line item. */
                description?: string;
                /** The unit quantity of the item. Defaults to 1. */
                quantity?: number;
                /** The individual price per unit. */
                unit_price: number;
                /** Whether the invoice’s tax percentage applies to this line item. Defaults to false. */
                taxed?: boolean;
                /** Whether the invoice’s tax2 percentage applies to this line item. Defaults to false. */
                taxed2?: boolean;
              }[]
            | null;
        };
      };
    };
  };
  /** Retrieves the invoice with the given ID. Returns an invoice object and a 200 OK response code if a valid identifier was provided. */
  retrieveInvoice: {
    parameters: {
      path: {
        invoiceId: string;
      };
    };
    responses: {
      /** Retrieve an invoice */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete an invoice. Returns a 200 OK response code if the call succeeded. */
  deleteInvoice: {
    parameters: {
      path: {
        invoiceId: string;
      };
    };
    responses: {
      /** Delete an invoice */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific invoice by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an invoice object and a 200 OK response code if the call succeeded. */
  updateInvoice: {
    parameters: {
      path: {
        invoiceId: string;
      };
    };
    responses: {
      /** Update an invoice */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the client this invoice belongs to. */
          client_id?: number | null;
          /** The ID of the retainer associated with this invoice. */
          retainer_id?: number | null;
          /** The ID of the estimate associated with this invoice. */
          estimate_id?: number | null;
          /** If no value is set, the number will be automatically generated. */
          number?: string | null;
          /** The purchase order number. */
          purchase_order?: string | null;
          /** This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%. */
          tax?: number | null;
          /** This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%. */
          tax2?: number | null;
          /** This percentage is subtracted from the subtotal. Example: use 10.0 for 10.0%. */
          discount?: number | null;
          /** The invoice subject. */
          subject?: string | null;
          /** Any additional notes to include on the invoice. */
          notes?: string | null;
          /** The currency used by the invoice. If not provided, the client’s currency will be used. See a list of supported currencies */
          currency?: string | null;
          /** Date the invoice was issued. */
          issue_date?: string | null;
          /** Date the invoice is due. */
          due_date?: string | null;
          /** The timeframe in which the invoice should be paid. Options: upon receipt, net 15, net 30, net 45, or net 60. */
          payment_term?: string | null;
          /** Array of line item parameters */
          line_items?:
            | {
                /** Unique ID for the line item. */
                id?: number;
                /** The ID of the project associated with this line item. */
                project_id?: number;
                /** The name of an invoice item category. */
                kind?: string;
                /** Text description of the line item. */
                description?: string;
                /** The unit quantity of the item. Defaults to 1. */
                quantity?: number;
                /** The individual price per unit. */
                unit_price?: number;
                /** Whether the invoice’s tax percentage applies to this line item. Defaults to false. */
                taxed?: boolean;
                /** Whether the invoice’s tax2 percentage applies to this line item. Defaults to false. */
                taxed2?: boolean;
              }[]
            | null;
        };
      };
    };
  };
  /**
   * Returns a list of messages associated with a given invoice. The invoice messages are returned sorted by creation date, with the most recently created messages appearing first.
   *
   * The response contains an object with an invoice_messages property that contains an array of up to per_page messages. Each entry in the array is a separate message object. If no more messages are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your messages.
   */
  listMessagesForInvoice: {
    parameters: {
      path: {
        invoiceId: string;
      };
      query: {
        /** Only return invoice messages that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all messages for an invoice */
      200: {
        content: {
          "application/json": components["schemas"]["InvoiceMessages"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new invoice message object. Returns an invoice message object and a 201 Created response code if the call succeeded. */
  createInvoiceMessage: {
    parameters: {
      path: {
        invoiceId: string;
      };
    };
    responses: {
      /** Create an invoice message or change invoice status */
      201: {
        content: {
          "application/json": components["schemas"]["InvoiceMessage"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** If provided, runs an event against the invoice. Options: close, draft, re-open, or send. */
          event_type?: string | null;
          /** Array of recipient parameters. See below for details. */
          recipients:
            | {
                /** Name of the message recipient. */
                name?: string;
                /** Email of the message recipient. */
                email: string;
              }[]
            | null;
          /** The message subject. */
          subject?: string | null;
          /** The message body. */
          body?: string | null;
          /** If set to true, a link to the client invoice URL will be included in the message email. Defaults to false. Ignored when thank_you is set to true. */
          include_link_to_client_invoice?: boolean | null;
          /** If set to true, a PDF of the invoice will be attached to the message email. Defaults to false. */
          attach_pdf?: boolean | null;
          /** If set to true, a copy of the message email will be sent to the current user. Defaults to false. */
          send_me_a_copy?: boolean | null;
          /** If set to true, a thank you message email will be sent. Defaults to false. */
          thank_you?: boolean | null;
        };
      };
    };
  };
  /** Delete an invoice message. Returns a 200 OK response code if the call succeeded. */
  deleteInvoiceMessage: {
    parameters: {
      path: {
        invoiceId: string;
        messageId: string;
      };
    };
    responses: {
      /** Delete an invoice message */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Returns a list of payments associate with a given invoice. The payments are returned sorted by creation date, with the most recently created payments appearing first.
   *
   * The response contains an object with an invoice_payments property that contains an array of up to per_page payments. Each entry in the array is a separate payment object. If no more payments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your payments.
   */
  listPaymentsForInvoice: {
    parameters: {
      path: {
        invoiceId: string;
      };
      query: {
        /** Only return invoice payments that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all payments for an invoice */
      200: {
        content: {
          "application/json": components["schemas"]["InvoicePayments"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new invoice payment object. Returns an invoice payment object and a 201 Created response code if the call succeeded. */
  createInvoicePayment: {
    parameters: {
      path: {
        invoiceId: string;
      };
    };
    responses: {
      /** Create an invoice payment */
      201: {
        content: {
          "application/json": components["schemas"]["InvoicePayment"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The amount of the payment. */
          amount: number | null;
          /** Date and time the payment was made. Pass either paid_at or paid_date, but not both. */
          paid_at?: string | null;
          /** Date the payment was made. Pass either paid_at or paid_date, but not both. */
          paid_date?: string | null;
          /** Any notes to be associated with the payment. */
          notes?: string | null;
        };
      };
    };
  };
  /** Delete an invoice payment. Returns a 200 OK response code if the call succeeded. */
  deleteInvoicePayment: {
    parameters: {
      path: {
        invoiceId: string;
        paymentId: string;
      };
    };
    responses: {
      /** Delete an invoice payment */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Returns a list of your projects. The projects are returned sorted by creation date, with the most recently created projects appearing first.
   *
   * The response contains an object with a projects property that contains an array of up to per_page projects. Each entry in the array is a separate project object. If no more projects are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your projects.
   */
  listProjects: {
    parameters: {
      query: {
        /** Pass true to only return active projects and false to return inactive projects. */
        is_active?: boolean;
        /** Only return projects belonging to the client with the given ID. */
        client_id?: number;
        /** Only return projects that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all projects */
      200: {
        content: {
          "application/json": components["schemas"]["Projects"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new project object. Returns a project object and a 201 Created response code if the call succeeded. */
  createProject: {
    responses: {
      /** Create a project */
      201: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the client to associate this project with. */
          client_id: number | null;
          /** The name of the project. */
          name: string | null;
          /** The code associated with the project. */
          code?: string | null;
          /** Whether the project is active or archived. Defaults to true. */
          is_active?: boolean | null;
          /** Whether the project is billable or not. */
          is_billable: boolean | null;
          /** Whether the project is a fixed-fee project or not. */
          is_fixed_fee?: boolean | null;
          /** The method by which the project is invoiced. Options: Project, Tasks, People, or none. */
          bill_by: string | null;
          /** Rate for projects billed by Project Hourly Rate. */
          hourly_rate?: number | null;
          /** The budget in hours for the project when budgeting by time. */
          budget?: number | null;
          /** The method by which the project is budgeted. Options: project (Hours Per Project), project_cost (Total Project Fees), task (Hours Per Task), task_fees (Fees Per Task), person (Hours Per Person), none (No Budget). */
          budget_by: string | null;
          /** Option to have the budget reset every month. Defaults to false. */
          budget_is_monthly?: boolean | null;
          /** Whether Project Managers should be notified when the project goes over budget. Defaults to false. */
          notify_when_over_budget?: boolean | null;
          /** Percentage value used to trigger over budget email alerts. Example: use 10.0 for 10.0%. */
          over_budget_notification_percentage?: number | null;
          /** Option to show project budget to all employees. Does not apply to Total Project Fee projects. Defaults to false. */
          show_budget_to_all?: boolean | null;
          /** The monetary budget for the project when budgeting by money. */
          cost_budget?: number | null;
          /** Option for budget of Total Project Fees projects to include tracked expenses. Defaults to false. */
          cost_budget_include_expenses?: boolean | null;
          /** The amount you plan to invoice for the project. Only used by fixed-fee projects. */
          fee?: number | null;
          /** Project notes. */
          notes?: string | null;
          /** Date the project was started. */
          starts_on?: string | null;
          /** Date the project will end. */
          ends_on?: string | null;
        };
      };
    };
  };
  /** Retrieves the project with the given ID. Returns a project object and a 200 OK response code if a valid identifier was provided. */
  retrieveProject: {
    parameters: {
      path: {
        projectId: string;
      };
    };
    responses: {
      /** Retrieve a project */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Deletes a project and any time entries or expenses tracked to it.
   * However, invoices associated with the project will not be deleted.
   * If you don’t want the project’s time entries and expenses to be deleted, you should archive the project instead.
   */
  deleteProject: {
    parameters: {
      path: {
        projectId: string;
      };
    };
    responses: {
      /** Delete a project */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific project by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a project object and a 200 OK response code if the call succeeded. */
  updateProject: {
    parameters: {
      path: {
        projectId: string;
      };
    };
    responses: {
      /** Update a project */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the client to associate this project with. */
          client_id?: number | null;
          /** The name of the project. */
          name?: string | null;
          /** The code associated with the project. */
          code?: string | null;
          /** Whether the project is active or archived. Defaults to true. */
          is_active?: boolean | null;
          /** Whether the project is billable or not. */
          is_billable?: boolean | null;
          /** Whether the project is a fixed-fee project or not. */
          is_fixed_fee?: boolean | null;
          /** The method by which the project is invoiced. Options: Project, Tasks, People, or none. */
          bill_by?: string | null;
          /** Rate for projects billed by Project Hourly Rate. */
          hourly_rate?: number | null;
          /** The budget in hours for the project when budgeting by time. */
          budget?: number | null;
          /** The method by which the project is budgeted. Options: project (Hours Per Project), project_cost (Total Project Fees), task (Hours Per Task), task_fees (Fees Per Task), person (Hours Per Person), none (No Budget). */
          budget_by?: string | null;
          /** Option to have the budget reset every month. Defaults to false. */
          budget_is_monthly?: boolean | null;
          /** Whether Project Managers should be notified when the project goes over budget. Defaults to false. */
          notify_when_over_budget?: boolean | null;
          /** Percentage value used to trigger over budget email alerts. Example: use 10.0 for 10.0%. */
          over_budget_notification_percentage?: number | null;
          /** Option to show project budget to all employees. Does not apply to Total Project Fee projects. Defaults to false. */
          show_budget_to_all?: boolean | null;
          /** The monetary budget for the project when budgeting by money. */
          cost_budget?: number | null;
          /** Option for budget of Total Project Fees projects to include tracked expenses. Defaults to false. */
          cost_budget_include_expenses?: boolean | null;
          /** The amount you plan to invoice for the project. Only used by fixed-fee projects. */
          fee?: number | null;
          /** Project notes. */
          notes?: string | null;
          /** Date the project was started. */
          starts_on?: string | null;
          /** Date the project will end. */
          ends_on?: string | null;
        };
      };
    };
  };
  /**
   * Returns a list of your task assignments for the project identified by PROJECT_ID. The task assignments are returned sorted by creation date, with the most recently created task assignments appearing first.
   *
   * The response contains an object with a task_assignments property that contains an array of up to per_page task assignments. Each entry in the array is a separate task assignment object. If no more task assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your task assignments.
   */
  listTaskAssignmentsForSpecificProject: {
    parameters: {
      path: {
        projectId: string;
      };
      query: {
        /** Pass true to only return active task assignments and false to return inactive task assignments. */
        is_active?: boolean;
        /** Only return task assignments that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all task assignments for a specific project */
      200: {
        content: {
          "application/json": components["schemas"]["TaskAssignments"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new task assignment object. Returns a task assignment object and a 201 Created response code if the call succeeded. */
  createTaskAssignment: {
    parameters: {
      path: {
        projectId: string;
      };
    };
    responses: {
      /** Create a task assignment */
      201: {
        content: {
          "application/json": components["schemas"]["TaskAssignment"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the task to associate with the project. */
          task_id: number | null;
          /** Whether the task assignment is active or archived. Defaults to true. */
          is_active?: boolean | null;
          /** Whether the task assignment is billable or not. Defaults to false. */
          billable?: boolean | null;
          /** Rate used when the project’s bill_by is Tasks. Defaults to null when billing by task hourly rate, otherwise 0. */
          hourly_rate?: number | null;
          /** Budget used when the project’s budget_by is task or task_fees. */
          budget?: number | null;
        };
      };
    };
  };
  /** Retrieves the task assignment with the given ID. Returns a task assignment object and a 200 OK response code if a valid identifier was provided. */
  retrieveTaskAssignment: {
    parameters: {
      path: {
        projectId: string;
        taskAssignmentId: string;
      };
    };
    responses: {
      /** Retrieve a task assignment */
      200: {
        content: {
          "application/json": components["schemas"]["TaskAssignment"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a task assignment. Deleting a task assignment is only possible if it has no time entries associated with it. Returns a 200 OK response code if the call succeeded. */
  deleteTaskAssignment: {
    parameters: {
      path: {
        projectId: string;
        taskAssignmentId: string;
      };
    };
    responses: {
      /** Delete a task assignment */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific task assignment by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a task assignment object and a 200 OK response code if the call succeeded. */
  updateTaskAssignment: {
    parameters: {
      path: {
        projectId: string;
        taskAssignmentId: string;
      };
    };
    responses: {
      /** Update a task assignment */
      200: {
        content: {
          "application/json": components["schemas"]["TaskAssignment"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** Whether the task assignment is active or archived. */
          is_active?: boolean | null;
          /** Whether the task assignment is billable or not. */
          billable?: boolean | null;
          /** Rate used when the project’s bill_by is Tasks. */
          hourly_rate?: number | null;
          /** Budget used when the project’s budget_by is task or task_fees. */
          budget?: number | null;
        };
      };
    };
  };
  /**
   * Returns a list of user assignments for the project identified by PROJECT_ID. The user assignments are returned sorted by creation date, with the most recently created user assignments appearing first.
   *
   * The response contains an object with a user_assignments property that contains an array of up to per_page user assignments. Each entry in the array is a separate user assignment object. If no more user assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your user assignments.
   */
  listUserAssignmentsForSpecificProject: {
    parameters: {
      path: {
        projectId: string;
      };
      query: {
        /** Only return user assignments belonging to the user with the given ID. */
        user_id?: number;
        /** Pass true to only return active user assignments and false to return inactive user assignments. */
        is_active?: boolean;
        /** Only return user assignments that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all user assignments for a specific project */
      200: {
        content: {
          "application/json": components["schemas"]["UserAssignments"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new user assignment object. Returns a user assignment object and a 201 Created response code if the call succeeded. */
  createUserAssignment: {
    parameters: {
      path: {
        projectId: string;
      };
    };
    responses: {
      /** Create a user assignment */
      201: {
        content: {
          "application/json": components["schemas"]["UserAssignment"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the user to associate with the project. */
          user_id: number | null;
          /** Whether the user assignment is active or archived. Defaults to true. */
          is_active?: boolean | null;
          /** Determines if the user has Project Manager permissions for the project. Defaults to false for users with Regular User permissions and true for those with Project Managers or Administrator permissions. */
          is_project_manager?: boolean | null;
          /** Determines which billable rate(s) will be used on the project for this user when bill_by is People. When true, the project will use the user’s default billable rates. When false, the project will use the custom rate defined on this user assignment. Defaults to true. */
          use_default_rates?: boolean | null;
          /** Custom rate used when the project’s bill_by is People and use_default_rates is false. Defaults to 0. */
          hourly_rate?: number | null;
          /** Budget used when the project’s budget_by is person. */
          budget?: number | null;
        };
      };
    };
  };
  /** Retrieves the user assignment with the given ID. Returns a user assignment object and a 200 OK response code if a valid identifier was provided. */
  retrieveUserAssignment: {
    parameters: {
      path: {
        projectId: string;
        userAssignmentId: string;
      };
    };
    responses: {
      /** Retrieve a user assignment */
      200: {
        content: {
          "application/json": components["schemas"]["UserAssignment"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a user assignment. Deleting a user assignment is only possible if it has no time entries or expenses associated with it. Returns a 200 OK response code if the call succeeded. */
  deleteUserAssignment: {
    parameters: {
      path: {
        projectId: string;
        userAssignmentId: string;
      };
    };
    responses: {
      /** Delete a user assignment */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific user assignment by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a user assignment object and a 200 OK response code if the call succeeded. */
  updateUserAssignment: {
    parameters: {
      path: {
        projectId: string;
        userAssignmentId: string;
      };
    };
    responses: {
      /** Update a user assignment */
      200: {
        content: {
          "application/json": components["schemas"]["UserAssignment"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** Whether the user assignment is active or archived. */
          is_active?: boolean | null;
          /** Determines if the user has Project Manager permissions for the project. */
          is_project_manager?: boolean | null;
          /** Determines which billable rate(s) will be used on the project for this user when bill_by is People. When true, the project will use the user’s default billable rates. When false, the project will use the custom rate defined on this user assignment. */
          use_default_rates?: boolean | null;
          /** Custom rate used when the project’s bill_by is People and use_default_rates is false. */
          hourly_rate?: number | null;
          /** Budget used when the project’s budget_by is person. */
          budget?: number | null;
        };
      };
    };
  };
  expenseCategoriesReport: {
    parameters: {
      query: {
        /** Only report on expenses with a spent_date on or after the given date. */
        from: string;
        /** Only report on expenses with a spent_date on or before the given date. */
        to: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 1000.  (Default: 1000) */
        per_page?: number;
      };
    };
    responses: {
      /** Expense Categories Report */
      200: {
        content: {
          "application/json": components["schemas"]["ExpenseReportsResults"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  clientsExpensesReport: {
    parameters: {
      query: {
        /** Only report on expenses with a spent_date on or after the given date. */
        from: string;
        /** Only report on expenses with a spent_date on or before the given date. */
        to: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 1000.  (Default: 1000) */
        per_page?: number;
      };
    };
    responses: {
      /** Clients Report */
      200: {
        content: {
          "application/json": components["schemas"]["ExpenseReportsResults"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  projectsExpensesReport: {
    parameters: {
      query: {
        /** Only report on expenses with a spent_date on or after the given date. */
        from: string;
        /** Only report on expenses with a spent_date on or before the given date. */
        to: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 1000.  (Default: 1000) */
        per_page?: number;
      };
    };
    responses: {
      /** Projects Report */
      200: {
        content: {
          "application/json": components["schemas"]["ExpenseReportsResults"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  teamExpensesReport: {
    parameters: {
      query: {
        /** Only report on expenses with a spent_date on or after the given date. */
        from: string;
        /** Only report on expenses with a spent_date on or before the given date. */
        to: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 1000.  (Default: 1000) */
        per_page?: number;
      };
    };
    responses: {
      /** Team Report */
      200: {
        content: {
          "application/json": components["schemas"]["ExpenseReportsResults"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** The response contains an object with a results property that contains an array of up to per_page results. Each entry in the array is a separate result object. If no more results are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your results. */
  projectBudgetReport: {
    parameters: {
      query: {
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 1000.  (Default: 1000) */
        per_page?: number;
        /** Pass true to only return active projects and false to return inactive projects. */
        is_active?: boolean;
      };
    };
    responses: {
      /** Project Budget Report */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectBudgetReportResults"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  clientsTimeReport: {
    parameters: {
      query: {
        /** Only report on time entries with a spent_date on or after the given date. */
        from: string;
        /** Only report on time entries with a spent_date on or before the given date. */
        to: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 1000.  (Default: 1000) */
        per_page?: number;
      };
    };
    responses: {
      /** Clients Report */
      200: {
        content: {
          "application/json": components["schemas"]["TimeReportsResults"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  projectsTimeReport: {
    parameters: {
      query: {
        /** Only report on time entries with a spent_date on or after the given date. */
        from: string;
        /** Only report on time entries with a spent_date on or before the given date. */
        to: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 1000.  (Default: 1000) */
        per_page?: number;
      };
    };
    responses: {
      /** Projects Report */
      200: {
        content: {
          "application/json": components["schemas"]["TimeReportsResults"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  tasksReport: {
    parameters: {
      query: {
        /** Only report on time entries with a spent_date on or after the given date. */
        from: string;
        /** Only report on time entries with a spent_date on or before the given date. */
        to: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 1000.  (Default: 1000) */
        per_page?: number;
      };
    };
    responses: {
      /** Tasks Report */
      200: {
        content: {
          "application/json": components["schemas"]["TimeReportsResults"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  teamTimeReport: {
    parameters: {
      query: {
        /** Only report on time entries with a spent_date on or after the given date. */
        from: string;
        /** Only report on time entries with a spent_date on or before the given date. */
        to: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 1000.  (Default: 1000) */
        per_page?: number;
      };
    };
    responses: {
      /** Team Report */
      200: {
        content: {
          "application/json": components["schemas"]["TimeReportsResults"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * The response contains an object with a results property that contains an array of up to per_page results. Each entry in the array is a separate result object. If no more results are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your results.
   *
   * Note: Each request requires both the from and to parameters to be supplied in the URL’s query string. The timeframe supplied cannot exceed 1 year (365 days).
   */
  uninvoicedReport: {
    parameters: {
      query: {
        /** Only report on time entries and expenses with a spent_date on or after the given date. */
        from: string;
        /** Only report on time entries and expenses with a spent_date on or before the given date. */
        to: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 1000.  (Default: 1000) */
        per_page?: number;
      };
    };
    responses: {
      /** Uninvoiced Report */
      200: {
        content: {
          "application/json": components["schemas"]["UninvoicedReportResults"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Returns a list of roles in the account. The roles are returned sorted by creation date, with the most recently created roles appearing first.
   *
   * The response contains an object with a roles property that contains an array of up to per_page roles. Each entry in the array is a separate role object. If no more roles are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your roles.
   */
  listRoles: {
    parameters: {
      query: {
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all roles */
      200: {
        content: {
          "application/json": components["schemas"]["Roles"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new role object. Returns a role object and a 201 Created response code if the call succeeded. */
  createRole: {
    responses: {
      /** Create a role */
      201: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The  name of the role. */
          name: string | null;
          /** The IDs of the users assigned to this role. */
          user_ids?: number[] | null;
        };
      };
    };
  };
  /** Retrieves the role with the given ID. Returns a role object and a 200 OK response code if a valid identifier was provided. */
  retrieveRole: {
    parameters: {
      path: {
        roleId: string;
      };
    };
    responses: {
      /** Retrieve a role */
      200: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a role. Deleting a role will unlink it from any users it was assigned to. Returns a 200 OK response code if the call succeeded. */
  deleteRole: {
    parameters: {
      path: {
        roleId: string;
      };
    };
    responses: {
      /** Delete a role */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific role by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a role object and a 200 OK response code if the call succeeded. */
  updateRole: {
    parameters: {
      path: {
        roleId: string;
      };
    };
    responses: {
      /** Update a role */
      200: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The  name of the role. */
          name: string | null;
          /** The IDs of the users assigned to this role. */
          user_ids?: number[] | null;
        };
      };
    };
  };
  /**
   * Returns a list of your task assignments. The task assignments are returned sorted by creation date, with the most recently created task assignments appearing first.
   *
   * The response contains an object with a task_assignments property that contains an array of up to per_page task assignments. Each entry in the array is a separate task assignment object. If no more task assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your task assignments.
   */
  listTaskAssignments: {
    parameters: {
      query: {
        /** Pass true to only return active task assignments and false to return inactive task assignments. */
        is_active?: boolean;
        /** Only return task assignments that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all task assignments */
      200: {
        content: {
          "application/json": components["schemas"]["TaskAssignments"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Returns a list of your tasks. The tasks are returned sorted by creation date, with the most recently created tasks appearing first.
   *
   * The response contains an object with a tasks property that contains an array of up to per_page tasks. Each entry in the array is a separate task object. If no more tasks are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your tasks.
   */
  listTasks: {
    parameters: {
      query: {
        /** Pass true to only return active tasks and false to return inactive tasks. */
        is_active?: boolean;
        /** Only return tasks that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all tasks */
      200: {
        content: {
          "application/json": components["schemas"]["Tasks"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new task object. Returns a task object and a 201 Created response code if the call succeeded. */
  createTask: {
    responses: {
      /** Create a task */
      201: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The name of the task. */
          name: string | null;
          /** Used in determining whether default tasks should be marked billable when creating a new project. Defaults to true. */
          billable_by_default?: boolean | null;
          /** The default hourly rate to use for this task when it is added to a project. Defaults to 0. */
          default_hourly_rate?: number | null;
          /** Whether this task should be automatically added to future projects. Defaults to false. */
          is_default?: boolean | null;
          /** Whether this task is active or archived. Defaults to true. */
          is_active?: boolean | null;
        };
      };
    };
  };
  /** Retrieves the task with the given ID. Returns a task object and a 200 OK response code if a valid identifier was provided. */
  retrieveTask: {
    parameters: {
      path: {
        taskId: string;
      };
    };
    responses: {
      /** Retrieve a task */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a task. Deleting a task is only possible if it has no time entries associated with it. Returns a 200 OK response code if the call succeeded. */
  deleteTask: {
    parameters: {
      path: {
        taskId: string;
      };
    };
    responses: {
      /** Delete a task */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific task by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a task object and a 200 OK response code if the call succeeded. */
  updateTask: {
    parameters: {
      path: {
        taskId: string;
      };
    };
    responses: {
      /** Update a task */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The name of the task. */
          name?: string | null;
          /** Used in determining whether default tasks should be marked billable when creating a new project. */
          billable_by_default?: boolean | null;
          /** The default hourly rate to use for this task when it is added to a project. */
          default_hourly_rate?: number | null;
          /** Whether this task should be automatically added to future projects. */
          is_default?: boolean | null;
          /** Whether this task is active or archived. */
          is_active?: boolean | null;
        };
      };
    };
  };
  /**
   * Returns a list of your time entries. The time entries are returned sorted by spent_at date. At this time, the sort option can’t be customized.
   *
   * The response contains an object with a time_entries property that contains an array of up to per_page time entries. Each entry in the array is a separate time entry object. If no more time entries are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your time entries.
   */
  listTimeEntries: {
    parameters: {
      query: {
        /** Only return time entries belonging to the user with the given ID. */
        user_id?: number;
        /** Only return time entries belonging to the client with the given ID. */
        client_id?: number;
        /** Only return time entries belonging to the project with the given ID. */
        project_id?: number;
        /** Only return time entries belonging to the task with the given ID. */
        task_id?: number;
        /** Only return time entries with the given external_reference ID. */
        external_reference_id?: string;
        /** Pass true to only return time entries that have been invoiced and false to return time entries that have not been invoiced. */
        is_billed?: boolean;
        /** Pass true to only return running time entries and false to return non-running time entries. */
        is_running?: boolean;
        /** Only return time entries that have been updated since the given date and time. Use the ISO 8601 Format. */
        updated_since?: string;
        /** Only return time entries with a spent_date on or after the given date. */
        from?: string;
        /** Only return time entries with a spent_date on or before the given date. */
        to?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all time entries */
      200: {
        content: {
          "application/json": components["schemas"]["TimeEntries"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Creates a new time entry object. Returns a time entry object and a 201 Created response code if the call succeeded.
   *
   * You should only use this method to create time entries when your account is configured to track time via duration. You can verify this by visiting the Settings page in your Harvest account or by checking if wants_timestamp_timers is false in the Company API.
   */
  createTimeEntry: {
    responses: {
      /** Create a time entry */
      201: {
        content: {
          "application/json": components["schemas"]["TimeEntry"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the user to associate with the time entry. Defaults to the currently authenticated user’s ID. */
          user_id?: number | null;
          /** The ID of the project to associate with the time entry. */
          project_id: number | null;
          /** The ID of the task to associate with the time entry. */
          task_id: number | null;
          /** The ISO 8601 formatted date the time entry was spent. */
          spent_date: string | null;
          /** The time the entry started. Defaults to the current time. Example: “8:00am”. */
          started_time?: string | null;
          /** The time the entry ended. If provided, is_running will be set to false. If not provided, is_running will be set to true. */
          ended_time?: string | null;
          /** Any notes to be associated with the time entry. */
          notes?: string | null;
          /** An object containing the id, group_id, and permalink of the external reference. */
          external_reference?: {
            id?: string | null;
            group_id?: string | null;
            permalink?: string | null;
          } | null;
          /** The current amount of time tracked. If provided, the time entry will be created with the specified hours and is_running will be set to false. If not provided, hours will be set to 0.0 and is_running will be set to true. */
          hours?: number | null;
        };
      };
    };
  };
  /** Retrieves the time entry with the given ID. Returns a time entry object and a 200 OK response code if a valid identifier was provided. */
  retrieveTimeEntry: {
    parameters: {
      path: {
        timeEntryId: string;
      };
    };
    responses: {
      /** Retrieve a time entry */
      200: {
        content: {
          "application/json": components["schemas"]["TimeEntry"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a time entry. Deleting a time entry is only possible if it’s not closed and the associated project and task haven’t been archived.  However, Admins can delete closed entries. Returns a 200 OK response code if the call succeeded. */
  deleteTimeEntry: {
    parameters: {
      path: {
        timeEntryId: string;
      };
    };
    responses: {
      /** Delete a time entry */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific time entry by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a time entry object and a 200 OK response code if the call succeeded. */
  updateTimeEntry: {
    parameters: {
      path: {
        timeEntryId: string;
      };
    };
    responses: {
      /** Update a time entry */
      200: {
        content: {
          "application/json": components["schemas"]["TimeEntry"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The ID of the project to associate with the time entry. */
          project_id?: number | null;
          /** The ID of the task to associate with the time entry. */
          task_id?: number | null;
          /** The ISO 8601 formatted date the time entry was spent. */
          spent_date?: string | null;
          /** The time the entry started. Defaults to the current time. Example: “8:00am”. */
          started_time?: string | null;
          /** The time the entry ended. */
          ended_time?: string | null;
          /** The current amount of time tracked. */
          hours?: number | null;
          /** Any notes to be associated with the time entry. */
          notes?: string | null;
          /** An object containing the id, group_id, and permalink of the external reference. */
          external_reference?: {
            id?: string | null;
            group_id?: string | null;
            permalink?: string | null;
          } | null;
        };
      };
    };
  };
  /** Delete a time entry’s external reference. Returns a 200 OK response code if the call succeeded. */
  deleteTimeEntryExternalReference: {
    parameters: {
      path: {
        timeEntryId: string;
      };
    };
    responses: {
      /** Delete a time entry’s external reference */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Restarting a time entry is only possible if it isn’t currently running. Returns a 200 OK response code if the call succeeded. */
  restartStoppedTimeEntry: {
    parameters: {
      path: {
        timeEntryId: string;
      };
    };
    responses: {
      /** Restart a stopped time entry */
      200: {
        content: {
          "application/json": components["schemas"]["TimeEntry"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Stopping a time entry is only possible if it’s currently running. Returns a 200 OK response code if the call succeeded. */
  stopRunningTimeEntry: {
    parameters: {
      path: {
        timeEntryId: string;
      };
    };
    responses: {
      /** Stop a running time entry */
      200: {
        content: {
          "application/json": components["schemas"]["TimeEntry"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Returns a list of your projects user assignments, active and archived. The user assignments are returned sorted by creation date, with the most recently created user assignments appearing first.
   *
   * The response contains an object with a user_assignments property that contains an array of up to per_page user assignments. Each entry in the array is a separate user assignment object. If no more user assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your user assignments.
   */
  listUserAssignments: {
    parameters: {
      query: {
        /** Only return user assignments belonging to the user with the given ID. */
        user_id?: number;
        /** Pass true to only return active user assignments and false to return inactive user assignments. */
        is_active?: boolean;
        /** Only return user assignments that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all user assignments */
      200: {
        content: {
          "application/json": components["schemas"]["UserAssignments"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Returns a list of your users. The users are returned sorted by creation date, with the most recently created users appearing first.
   *
   * The response contains an object with a users property that contains an array of up to per_page users. Each entry in the array is a separate user object. If no more users are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your users.
   */
  listUsers: {
    parameters: {
      query: {
        /** Pass true to only return active users and false to return inactive users. */
        is_active?: boolean;
        /** Only return users that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all users */
      200: {
        content: {
          "application/json": components["schemas"]["Users"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new user object and sends an invitation email to the address specified in the email parameter. Returns a user object and a 201 Created response code if the call succeeded. */
  createUser: {
    responses: {
      /** Create a user */
      201: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The first name of the user. */
          first_name: string | null;
          /** The last name of the user. */
          last_name: string | null;
          /** The email address of the user. */
          email: string | null;
          /** The user’s timezone. Defaults to the company’s timezone. See a list of supported time zones. */
          timezone?: string | null;
          /** Whether the user should be automatically added to future projects. Defaults to false. */
          has_access_to_all_future_projects?: boolean | null;
          /** Whether the user is a contractor or an employee. Defaults to false. */
          is_contractor?: boolean | null;
          /** Whether the user has Admin permissions. Defaults to false. */
          is_admin?: boolean | null;
          /** Whether the user has Project Manager permissions. Defaults to false. */
          is_project_manager?: boolean | null;
          /** Whether the user can see billable rates on projects. Only applicable to Project Managers. Defaults to false. */
          can_see_rates?: boolean | null;
          /** Whether the user can create projects. Only applicable to Project Managers. Defaults to false. */
          can_create_projects?: boolean | null;
          /** Whether the user can create invoices. Only applicable to Project Managers. Defaults to false. */
          can_create_invoices?: boolean | null;
          /** Whether the user is active or archived. Defaults to true. */
          is_active?: boolean | null;
          /** The number of hours per week this person is available to work in seconds. Defaults to 126000 seconds (35 hours). */
          weekly_capacity?: number | null;
          /** The billable rate to use for this user when they are added to a project. Defaults to 0. */
          default_hourly_rate?: number | null;
          /** The cost rate to use for this user when calculating a project’s costs vs billable amount. Defaults to 0. */
          cost_rate?: number | null;
          /** The role names assigned to this person. */
          roles?: string[] | null;
        };
      };
    };
  };
  /** Retrieves the currently authenticated user. Returns a user object and a 200 OK response code. */
  retrieveTheCurrentlyAuthenticatedUser: {
    responses: {
      /** Retrieve the currently authenticated user */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Returns a list of your active project assignments for the currently authenticated user. The project assignments are returned sorted by creation date, with the most recently created project assignments appearing first.
   *
   * The response contains an object with a project_assignments property that contains an array of up to per_page project assignments. Each entry in the array is a separate project assignment object. If no more project assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your project assignments.
   */
  listActiveProjectAssignmentsForTheCurrentlyAuthenticatedUser: {
    parameters: {
      query: {
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List active project assignments for the currently authenticated user */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectAssignments"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieves the user with the given ID. Returns a user object and a 200 OK response code if a valid identifier was provided. */
  retrieveUser: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** Retrieve a user */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a user. Deleting a user is only possible if they have no time entries or expenses associated with them. Returns a 200 OK response code if the call succeeded. */
  deleteUser: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** Delete a user */
      200: unknown;
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Updates the specific user by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a user object and a 200 OK response code if the call succeeded. */
  updateUser: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** Update a user */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The first name of the user. Can’t be updated if the user is inactive. */
          first_name?: string | null;
          /** The last name of the user. Can’t be updated if the user is inactive. */
          last_name?: string | null;
          /** The email address of the user. Can’t be updated if the user is inactive. */
          email?: string | null;
          /** The user’s timezone. Defaults to the company’s timezone. See a list of supported time zones. */
          timezone?: string | null;
          /** Whether the user should be automatically added to future projects. */
          has_access_to_all_future_projects?: boolean | null;
          /** Whether the user is a contractor or an employee. */
          is_contractor?: boolean | null;
          /** Whether the user has Admin permissions. */
          is_admin?: boolean | null;
          /** Whether the user has Project Manager permissions. */
          is_project_manager?: boolean | null;
          /** Whether the user can see billable rates on projects. Only applicable to Project Managers. */
          can_see_rates?: boolean | null;
          /** Whether the user can create projects. Only applicable to Project Managers. */
          can_create_projects?: boolean | null;
          /** Whether the user can create invoices. Only applicable to Project Managers. */
          can_create_invoices?: boolean | null;
          /** Whether the user is active or archived. */
          is_active?: boolean | null;
          /** The number of hours per week this person is available to work in seconds. */
          weekly_capacity?: number | null;
          /** The billable rate to use for this user when they are added to a project. */
          default_hourly_rate?: number | null;
          /** The cost rate to use for this user when calculating a project’s costs vs billable amount. */
          cost_rate?: number | null;
          /** The role names assigned to this person. */
          roles?: string[] | null;
        };
      };
    };
  };
  /**
   * Returns a list of billable rates for the user identified by USER_ID. The billable rates are returned sorted by start_date, with the oldest starting billable rates appearing first.
   *
   * The response contains an object with a billable_rates property that contains an array of up to per_page billable rates. Each entry in the array is a separate billable rate object. If no more billable rates are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your billable rates.
   */
  listBillableRatesForSpecificUser: {
    parameters: {
      path: {
        userId: string;
      };
      query: {
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all billable rates for a specific user */
      200: {
        content: {
          "application/json": components["schemas"]["BillableRates"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Creates a new billable rate object. Returns a billable rate object and a 201 Created response code if the call succeeded.
   *
   *
   *   Creating a billable rate with no start_date will replace a user’s existing rate(s).
   *   Creating a billable rate with a start_date that is before a user’s existing rate(s) will replace those billable rates with the new one.
   */
  createBillableRate: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** Create a billable rate */
      201: {
        content: {
          "application/json": components["schemas"]["BillableRate"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The amount of the billable rate. */
          amount: number | null;
          /** The date the billable rate is effective. Cannot be a date in the future. */
          start_date?: string | null;
        };
      };
    };
  };
  /** Retrieves the billable rate with the given ID. Returns a billable rate object and a 200 OK response code if a valid identifier was provided. */
  retrieveBillableRate: {
    parameters: {
      path: {
        userId: string;
        billableRateId: string;
      };
    };
    responses: {
      /** Retrieve a billable rate */
      200: {
        content: {
          "application/json": components["schemas"]["BillableRate"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Returns a list of cost rates for the user identified by USER_ID. The cost rates are returned sorted by start_date, with the oldest starting cost rates appearing first.
   *
   * The response contains an object with a cost_rates property that contains an array of up to per_page cost rates. Each entry in the array is a separate cost rate object. If no more cost rates are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your cost rates.
   */
  listCostRatesForSpecificUser: {
    parameters: {
      path: {
        userId: string;
      };
      query: {
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List all cost rates for a specific user */
      200: {
        content: {
          "application/json": components["schemas"]["CostRates"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Creates a new cost rate object. Returns a cost rate object and a 201 Created response code if the call succeeded.
   *
   *
   *   Creating a cost rate with no start_date will replace a user’s existing rate(s).
   *   Creating a cost rate with a start_date that is before a user’s existing rate(s) will replace those cost rates with the new one.
   */
  createCostRate: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** Create a cost rate */
      201: {
        content: {
          "application/json": components["schemas"]["CostRate"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** json payload */
    requestBody: {
      content: {
        "application/json": {
          /** The amount of the cost rate. */
          amount: number | null;
          /** The date the cost rate is effective. Cannot be a date in the future. */
          start_date?: string | null;
        };
      };
    };
  };
  /** Retrieves the cost rate with the given ID. Returns a cost rate object and a 200 OK response code if a valid identifier was provided. */
  retrieveCostRate: {
    parameters: {
      path: {
        userId: string;
        costRateId: string;
      };
    };
    responses: {
      /** Retrieve a cost rate */
      200: {
        content: {
          "application/json": components["schemas"]["CostRate"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Returns a list of active project assignments for the user identified by USER_ID. The project assignments are returned sorted by creation date, with the most recently created project assignments appearing first.
   *
   * The response contains an object with a project_assignments property that contains an array of up to per_page project assignments. Each entry in the array is a separate project assignment object. If no more project assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your project assignments.
   */
  listActiveProjectAssignments: {
    parameters: {
      path: {
        userId: string;
      };
      query: {
        /** Only return project assignments that have been updated since the given date and time. */
        updated_since?: string;
        /** The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1) */
        page?: number;
        /** The number of records to return per page. Can range between 1 and 100.  (Default: 100) */
        per_page?: number;
      };
    };
    responses: {
      /** List active project assignments */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectAssignments"];
        };
      };
      /** error payload */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
